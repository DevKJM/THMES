@using JSMES.WebUI.Alpha.ViewModels.QUA.QUAG;
@using JSMES.WebUI.Alpha.Models.LogStruct;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;
@using JSMES.WebUI.Alpha.ViewModels.PRC.PRCH;
@using JSMES.WebUI.Alpha.Infrastructure.DBA;
@using JSMES.WebUI.Alpha.Infrastructure.Enums;

@{
    ViewBag.Title = "Main";
    var EQPNAME = ViewBag.EQP;
    var EMP = ViewBag.EMP;
    //var EQUIPMENTCODE = ViewBag.EQUIPMENTCODE;
}

<div class="container-fluid">
    <div class="row mt-2">
        <div class="col-lg-12 col-sm-12">
            <div id="form-container">
                @using (Html.BeginForm())
                {
                    @(Html.DevExtreme().Form<QUAG011_LIST>()
                        .ID("formInfo")
                        .ColCount(4)
                        .OnContentReady("formInfo_OnContentReady")
                        .ScrollingEnabled(false)
                        .Items(items =>
                        {
                            items.AddSimple()
                                .Editor(e => e.DropDownBox()
                                    .DataSource(d => d.WebApi().Controller("COMA001WebApi")
                                        .Key("PROCESSCODE")
                                        .LoadAction("PROCESS_LIST")
                                    )
                                    .DisplayExpr("PROCESSNAME")
                                    .ValueExpr("PROCESSCODE")
                                    .ReadOnly(true)
                                )
                                .Name("PROCESS")
                                .Label(T => T.Text(LabelText.PROCESS))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e.DropDownBox()
                                    .DataSource(d => d.WebApi().Controller("COMA001WebApi")
                                        .Key("EQUIPMENTCODE")
                                        .LoadAction("WORKCENTEREQUIPMENT_LIST")
                                        .LoadParams(new
                                        {
                                            WORKCENTERCODE = new JS("function() { return globalWorkcenterCode; }")
                                        })
                                    )
                                    .ContentTemplate(new TemplateName("EmbeddedDataGridSingle"))
                                    .DisplayExpr("EQUIPMENTNAME")
                                    .ValueExpr("EQUIPMENTCODE")
                                    .OnValueChanged("eqp_valueChanged")
                                    .DropDownOptions(c => c.Width(300))
                                    //.ReadOnly(true)
                                    .Placeholder("Select a value...")
                                    //.Value(new JS("globalEquipmentCode[0]"))
                                    )
                                .Name("EQUIPMENT")
                                .Label(T => T.Text(LabelText.EQUIPMENTNAME))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e.DropDownBox()
                                    .DataSource(d => d.WebApi().Controller("COMA003WebApi")
                                        .Key("SYSCODE")
                                        .LoadAction("INSPECTIONCLASSIFY_LIST")
                                    )
                                    .DisplayExpr("SYSCODENAME")
                                    .ValueExpr("SYSCODE")
                                    .ReadOnly(true)

                                    )
                                .Name("INSPECTCLASSIFY")
                                .Label(T => T.Text(LabelText.INSEPCTIONCLASSIFY))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e
                                    .DateBox()
                                    .Type(DateBoxType.Date)
                                    .Value(DateTime.Today)
                                    .ReadOnly(true)
                                    .Width("100%")
                                )
                                .Label(T => T.Text(LabelText.INSPECTDATE))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e.DropDownBox()
                                    .DataSource(d => d.WebApi().Controller("QUAG011WebApi")
                                        .Key("PARTNUMBER")
                                        .LoadAction("PARTNUMBER_LIST")
                                        .OnBeforeSend("Partnumber_OnBeforeSend")
                                    )
                                    .DropDownOptions(c => c.Width(500))
                                    .ContentTemplate(new TemplateName("EmbeddedDataPartGridSingle"))
                                    .DisplayExpr("PRODUCTNAME")
                                    .ValueExpr("PARTNUMBER")
                                    //.ID("PRODUCTNAME")
                                    .ReadOnly(true)
                                    .Placeholder("Select a value...")
                                //.OnValueChanged("itemPart_valueChanged")
                                //.Value(new JS("globalEquipmentCode[0]"))
                                )
                                .Name("PRODUCTNAME")
                                .Label(T => T.Text(LabelText.PRODUCTNAME))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e.TextBox().ReadOnly(true))
                                .Name("PARTNUMBER")
                                .Label(T => T.Text(LabelText.PARTNUMBER))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                //.OnFocusIn("txtPARTNUMBER_onFocusIn")
                                )
                                .Name("CARTYPE")
                                .Label(T => T.Text(LabelText.CARTYPE))
                                .ColSpan(1).Visible(false);

                            items.AddSimple()
                                .Editor(e => e.TagBox()
                                    .Placeholder(LabelText.ANSWERPLEASESELECTHR)
                                    .DataSource(d => d.WebApi().Controller("COMA002WebApi")
                                        .Key("EMPNAME")
                                        .LoadAction("HR_LIST")
                                    )
                                    .DisplayExpr("EMPNAME")
                                    .ValueExpr("EMPNAME")
                                    //.SearchEnabled(true)
                                    //.Multiline(true)
                                    .HideSelectedItems(true)
                                )
                                .Name("INSPECTOR")
                                .Label(T => T.Text(LabelText.INSPECTOR))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e
                                    .TextBox().ID("txtOrderNumber")
                                    .ReadOnly(true)
                                    .Placeholder(LabelText.ANSWERPLEASESELECTORDER)
                                    //.OnFocusIn("OrderNumber_onFocusIn")
                                    .Visible(false)
                                ).Name("ORDERNUMBER")
                                .Label(d=>d.Visible(false))
                                .ColSpan(1);

                            items.AddSimple()
                                .Editor(e => e
                                    .TextBox().ID("txtSEQ").ReadOnly(true)
                                    .Visible(false)
                                ).Name("ORDERSEQUENCE")
                                .Label(d=>d.Visible(false))
                                .ColSpan(1);

                            items.AddEmpty()
                                .ColSpan(1);
                        })
                    )
                }
            </div>
            @(Html.DevExtreme().DataGrid<QUAG021B_LIST>()
                    .ID("grdSampleInspection")
                     .DataSource(d => d.WebApi()
                                    .Controller("QUAG011WebApi")
                                    .Key("INSPECTCODE")
                                    .LoadAction("getSampleInspection")
                                    .OnBeforeSend("grdSampleInspection_onBeforeSend")
                                )
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.DISPLAYSEQUENCE).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.INSPECTCODE).AllowEditing(false)
                            .Lookup(l => l.DataSource(d => d.WebApi()
                                .Controller("MSTL002WebApi")
                                .LoadAction("getInspectItem")
                                .Key("INSPECTCODE")
                                )
                                .ValueExpr("INSPECTCODE")
                                .DisplayExpr("INSPECTNAME")
                                .AllowClearing(true)
                            );

                        //columns.Add().Caption("11212dfd").Columns(a =>
                        //{
                        //    a.AddFor(m => m.DISPLAYSEQUENCE).AllowEditing(false).Visible(true);
                        //});



                        columns.AddFor(m => m.SPEC).AllowEditing(false);//.CalculateCellValue("function(rowdata){ return rowdata.LSL + ' ~ ' + rowdata.USL;}");
                        columns.AddFor(m => m.INSPECTUNIT).AllowEditing(false)
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .Controller("COMA003WebApi").Key("SYSCODE")
                                    .LoadAction("INSPECTUNIT_LIST")
                                )
                                .DisplayExpr("SYSCODENAME")
                                .ValueExpr("SYSCODE")
                            );
                        columns.AddFor(m => m.DATATYPE).Visible(false);
                        columns.AddFor(m => m.SPECCLASS).Visible(false);
                        columns.AddFor(m => m.USL).Visible(false);
                        columns.AddFor(m => m.LSL).Visible(false);
                        columns.AddFor(m => m.CSL).Visible(false);
                        columns.AddFor(m => m.UCL).Visible(false);
                        columns.AddFor(m => m.LCL).Visible(false);
                        columns.AddFor(m => m.RESULT).AllowEditing(false).AllowSorting(false);
                        columns.AddFor(m => m.SAMPLE1).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("1").Width(100);
                        columns.AddFor(m => m.SAMPLE2).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("2").Width(100);
                        columns.AddFor(m => m.SAMPLE3).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("3").Width(100);
                        columns.AddFor(m => m.SAMPLE4).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("4").Width(100);
                        columns.AddFor(m => m.SAMPLE5).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("5").Width(100);
                        columns.AddFor(m => m.SAMPLE6).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("6").Width(100);
                        columns.AddFor(m => m.SAMPLE7).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("7").Width(100);
                        columns.AddFor(m => m.SAMPLE8).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("8").Width(100);
                        columns.AddFor(m => m.SAMPLE9).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("9").Width(100);
                        columns.AddFor(m => m.SAMPLE10).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("10").Width(100);
                        columns.AddFor(m => m.SAMPLE11).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("11").Width(100);
                        columns.AddFor(m => m.SAMPLE12).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("12").Width(100);
                        columns.AddFor(m => m.SAMPLE13).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("13").Width(100);
                        columns.AddFor(m => m.SAMPLE14).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("14").Width(100);
                        columns.AddFor(m => m.SAMPLE15).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("15").Width(100);
                        columns.AddFor(m => m.SAMPLE16).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("16").Width(100);
                        columns.AddFor(m => m.SAMPLE17).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("17").Width(100);
                        columns.AddFor(m => m.SAMPLE18).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("18").Width(100);
                        columns.AddFor(m => m.SAMPLE19).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("19").Width(100);
                        columns.AddFor(m => m.SAMPLE20).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("20").Width(100);
                        columns.AddFor(m => m.SAMPLE21).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("21").Width(100);
                        columns.AddFor(m => m.SAMPLE22).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("22").Width(100);
                        columns.AddFor(m => m.SAMPLE23).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("23").Width(100);
                        columns.AddFor(m => m.SAMPLE24).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("24").Width(100);
                        columns.AddFor(m => m.SAMPLE25).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("25").Width(100);
                        columns.AddFor(m => m.SAMPLE26).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("26").Width(100);
                        columns.AddFor(m => m.SAMPLE27).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("27").Width(100);
                        columns.AddFor(m => m.SAMPLE28).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("28").Width(100);
                        columns.AddFor(m => m.SAMPLE29).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("29").Width(100);
                        columns.AddFor(m => m.SAMPLE30).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false).Caption("30").Width(100);
                        columns.AddFor(m => m.RESULT1).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE1).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT1).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE2).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT2).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE3).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT3).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE4).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT4).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE5).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT5).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE6).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT6).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE7).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT7).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE8).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT8).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE9).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT9).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE10).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT10).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE11).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT11).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE12).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT12).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE13).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT13).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE14).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT14).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE15).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT15).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE16).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT16).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE17).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT17).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE18).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT18).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE19).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT19).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE20).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT20).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE21).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT21).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE22).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT22).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE23).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT23).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE24).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT24).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE25).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT25).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE26).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT26).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE27).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT27).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE28).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT28).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE29).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT29).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE30).Visible(false);
                        columns.AddFor(m => m.INSPECTVALUE_TEXT30).Visible(false);
                        columns.AddFor(m => m.RESULT1).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT2).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT3).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT4).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT5).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT6).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT7).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT8).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT9).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT10).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT11).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT12).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT13).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT14).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT15).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT16).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT17).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT18).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT19).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT20).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT21).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT22).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT23).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT24).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT25).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT26).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT27).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT28).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT29).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);
                        columns.AddFor(m => m.RESULT30).AllowSorting(false).Width(100).AllowEditing(false).Visible(false);




                        //columns.Add().Columns(a =>
                        //{

                        //}).Caption("규격");

                        //columns.Add().Columns(a =>
                        //{

                        //}).Caption("단위");

                        //columns.Add().Columns(a =>
                        //{

                        //}).Caption("검사");





                    })
                      .Editing(e =>
                          e.Mode(GridEditMode.Batch)
                              .AllowUpdating(true)
                              .AllowAdding(false)
                      )
                    .ColumnMinWidth(50)
                    .SearchPanel(c => c.Visible(false))
                    .RemoteOperations(true)
                    .ColumnAutoWidth(true)
                    .ShowRowLines(true)
                    .Paging(p => p.PageSize(25).Enabled(true))
                    .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                    .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                    .AllowColumnResizing(true)
                    .RowAlternationEnabled(true)
                    .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true))
                    .Selection(s => s.SelectAllMode(SelectAllMode.AllPages).ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.OnClick).Mode(SelectionMode.Single))
                      .OnInitialized("grdSampleInspection_OnInitialized")
                      //.OnCellClick("grdSampleInspection_OnCellClick")
                      .OnToolbarPreparing("grdSampleInspection_OnToolbarPreparing")
                      .OnEditorPreparing("grdSampleInspection_OnEditorPrepared")
                      .OnCellPrepared("grdSampleInspection_OnCellPrepared")
                  .ElementAttr("class", "dx-dxdatagrid-no-highlight-outline")
            )
            <div id="form-container" style="margin-top: 10px">
                @using (Html.BeginForm())
                {
                    @(Html.DevExtreme().Form<QUAG021_LIST>()
                                                                          .ID("formWO3")
                                                                          .ColCount(4)
                                                                          .ScrollingEnabled(false)
                                                                          .Items(items =>
                                                                          {

                                                                              items.AddEmpty().ColSpan(2);
                                                                              items.AddButton().ColSpan(1)
                                                                                  .HorizontalAlignment(HorizontalAlignment.Left)
                                                                                  .ButtonOptions(b => b.Text(LabelText.INSERTION)
                                                                                      .Icon("check")
                                                                                      .ID("btnSave")
                                                                                      //.Height("90%")
                                                                                      .Width("100%")
                                                                                      .StylingMode(ButtonStylingMode.Contained)
                                                                                      .Type(ButtonType.Success)
                                                                                      .Disabled(new JS("!iudAuth()"))
                                                                                      .OnClick("btnSave_OnClick")
                                                                                  );

                                                                              items.AddButton().ColSpan(1)
                                                                                  .HorizontalAlignment(HorizontalAlignment.Left)
                                                                                  .ButtonOptions(b => b.Text(LabelText.REFRESH)
                                                                                      .Icon("refresh")
                                                                                      .ID("btnRemove")
                                                                                      .Width("100%")
                                                                                      .StylingMode(ButtonStylingMode.Contained)
                                                                                      .Type(ButtonType.Normal)
                                                                                      .Disabled(new JS("!iudAuth()"))
                                                                                      .OnClick("btnRefresh_OnClick")
                                                                                  );
                                                                          })
                    )
                }
            </div>
        </div>
    </div>
</div>

@*품번 선택*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedDataPartGridSingle"))
{
    @(Html.DevExtreme().DataGrid<PartNumberMaster>()
                  .ID("grdPartList")
                  .DataSource(new JS(@"component.option(""dataSource"")"))
                  .Columns(columns =>
                  {
      //columns.AddFor(m => m.PLANTCODE).Visible(false);

      columns.AddFor(m => m.PARTNUMBER);
                      columns.AddFor(m => m.PRODUCTNAME);
                      columns.AddFor(m => m.UDCF1)
                          .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                              .Controller("COMA003WebApi").Key("SYSCODE")
                              .LoadAction("CARTYPE_LIST"))
                              .DisplayExpr("SYSCODENAME")
                              .ValueExpr("SYSCODE")
                          ).Caption(LabelText.CARTYPE);
                  })
                  //.StateStoring(s => s.Enabled(true).StorageKey("PRCA001_grdPartList").Type(StateStoringType.LocalStorage))
                  .ColumnAutoWidth(true)
                  .HoverStateEnabled(true)
                  .Paging(p => p.PageSize(5))
                  .FilterRow(f => f.Visible(true))
                  .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true).Mode(GridScrollingMode.Infinite))
                  .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                  .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                  .OnSelectionChanged(@<text>
                    function(selectedItems) {
                    var haskey;
                    var keys = selectedItems.selectedRowKeys;
                    console.log(selectedItems);

                    if(typeof keys !== undefined && keys.length > 0)
                    {
                    haskey = true;
                    }

                    if (haskey != undefined)
                    component.option("value", haskey ? keys[0] : null);

                    if(typeof keys !== 'undefined' && keys.length > 0){
                    $('#formInfo').dxForm('instance').updateData('CARTYPE', selectedItems.selectedRowsData[0].UDCF1);
                    component.close();
                    }
                    }
                </text>)
    )
}

@*설비 선택*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridSingle"))
{
    @(Html.DevExtreme().DataGrid<EquipmentMaster>()
                                                          .ID("grdList")
                                                          .DataSource(new JS(@"component.option(""dataSource"")"))
                                                          .Columns(columns =>
                                                          {
                                              //columns.AddFor(m => m.PLANTCODE).Visible(false);

                                              columns.AddFor(m => m.EQUIPMENTCODE).Visible(false);
                                                              columns.AddFor(m => m.EQUIPMENTNAME);
                                                          })
                                                          //.StateStoring(s => s.Enabled(true).StorageKey("PRCA001_grdPartList").Type(StateStoringType.LocalStorage))
                                                          .ColumnAutoWidth(true)
                                                          .HoverStateEnabled(true)
                                                          .Paging(p => p.PageSize(10))
                                                          .FilterRow(f => f.Visible(false))
                                                          .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
                                                          .Height(445)
                                                          //.Width(800)
                                                          .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true).Mode(GridScrollingMode.Standard))
                                                          .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                                                          .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                                          .OnSelectionChanged(@<text>
                                                            function(selectedItems) {
                                                            var haskey;
                                                            var keys = selectedItems.selectedRowKeys;
                                                            if(typeof keys !== 'undefined' && keys.length > 0)
                                                            {
                                                            haskey = true;
                                                            }

                                                            component.option("value", haskey ? keys[0] : null);
                                                            component.option("subvalue", selectedItems.selectedRowsData);
                                                            if(typeof keys !== 'undefined' && keys.length > 0){
                                                            component.close();
                                                            }
                                                            }
                                                        </text>)
    )
}



@Html.Partial("_DropdownPartial")

<script>
    var sampleCount;

    var displaySeq = 1;

    var inspectclassify;
    var inspectclassifycnt;


    var priorities = [{
        "CODE": "OK",
        "NAME": "양품"
        }, {
            "CODE": "NG",
            "NAME": "불량"
        }];


    function eqp_valueChanged(e) {
        if (e.value  == null || e.value == "") {
            return;
        }

        setWorkData(globalProcessCode, e.value);
    }

    function setWorkData(proc, eqp) {

        var param = $.param({
            processCode: proc,
            equipmentCode: eqp == undefined ? "" : eqp
        });

        //$("#form").dxForm('instance').getEditor("WORKER").option("disabled", true);

        $.ajax({
            url: '@Url.Action("CheckWorkStatus", "QUAG021WebApi", new {httproute = "DefaultApi",})',
            data: param,
            type: 'GET',
            success: function (data) {
                if (data.data.length > 0) {
                    displaySeq = data.data[0] == undefined ? 0 : data.data[0].CURRENTSAMPLECOUNT == null ? 0 : undefined ? 0 : data.data[0].CURRENTSAMPLECOUNT;
                    displaySeq++;

                    $('#formInfo').dxForm('instance').getEditor('PRODUCTNAME').option('value', data.data[0].PARTNUMBER);
                    $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value', data.data[0].PARTNUMBER);
                    //$('#formInfo').dxForm('instance').getEditor('CARTYPE').option('value', data.data[0].CARTYPE);
                    $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value', data.data[0].ORDERNUMBER);
                    $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value', data.data[0].ORDERSEQUENCE);
                    $('#formInfo').dxForm('instance').getEditor('INSPECTCLASSIFY').option('value', checkClassfiy(displaySeq));
                    if (data.data[0].WORKER != null)
                        $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value', data.data[0].WORKER.split(','));

                    if ($("#grdSampleInspection").dxDataGrid('instance') != undefined) {
                        $("#grdSampleInspection").dxDataGrid("instance").cancelEditData();
                        $("#grdSampleInspection").dxDataGrid("instance").refresh();
                    }

                } else {
                    $('#formInfo').dxForm('instance').getEditor('PRODUCTNAME').option('value', null);
                    $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value', null);
                    //$('#formInfo').dxForm('instance').getEditor('CARTYPE').option('value', null);
                    $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value', []);
                    $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value', null);
                    $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value', null);
                    $('#formInfo').dxForm('instance').getEditor('INSPECTCLASSIFY').option('value', null);

                    if ($("#grdSampleInspection").dxDataGrid('instance') != undefined) {
                        $("#grdSampleInspection").dxDataGrid("instance").cancelEditData();
                        $("#grdSampleInspection").dxDataGrid("instance").refresh();
                    }

                    var validate = $("#formInfo").dxForm('instance').validate();

                    if (validate.brokenRules.length > 0) {
                        validate.brokenRules.forEach(function (e) {
                            e.validator.reset();
                        });
                    }
                }
            },
            error: function (ex) {
                showError(this, ex);
                $('#formInfo').dxForm('instance').getEditor('PRODUCTNAME').option('value', null);
                $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value', null);
                //$('#formInfo').dxForm('instance').getEditor('CARTYPE').option('value', null);
                $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value', []);
                $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value', null);
                $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value', null);
                $('#formInfo').dxForm('instance').getEditor('INSPECTCLASSIFY').option('value', null);

                if ($("#grdSampleInspection").dxDataGrid('instance') != undefined) {
                    $("#grdSampleInspection").dxDataGrid("instance").cancelEditData();
                    $("#grdSampleInspection").dxDataGrid("instance").refresh();
                }
            }
        });
    }

    function grdOcap_OnInitialized(e) {
        userCustomGrid(e);
    }

    function Partnumber_OnBeforeSend(method, ajaxOptions) {
        if (method == 'load') {

            var eqp = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');

            if (globalProcessCode != undefined)
                ajaxOptions.data.processCode = globalProcessCode;
            else
                ajaxOptions.data.processCode = "";
        }
    }

    function grdSampleInspection_OnCellPrepared(e) {
        if (e.rowType == 'header' &&
            (e.column.dataField.indexOf('SAMPLE') !== -1 || e.column.dataField.indexOf('RESULT') !== -1)) {
            e.cellElement.css("text-align", "center");
        }
        if (e.rowType == 'data' && e.column.dataField.indexOf('SAMPLE') !== -1) {
            if (e.data.DATATYPE == "B") {
                //if (e.value == "NG")
                //    e.cellElement.css("background-color", "red");
                //else
                //    e.cellElement.css("background-color", "");
                e.cellElement.css("background-color", e.value == "NG" ? "red" : "");
            } else if (e.data.DATATYPE == "N") {
                var lsl = e.data.LSL;
                var usl = e.data.USL;
                var specclass = e.data.SPECCLASS;
                var result = false;;

                if (specclass == "B") {
                    if (lsl <= e.value && e.value <= usl)
                        result = true;
                } else if (specclass == "L") {
                    if (lsl <= e.value)
                        result = true;
                } else if (specclass == "U") {
                    if (e.value <= usl)
                        result = true;
                }
                e.cellElement.css("background-color", result != true ? "red" : "");
            }
            e.cellElement.css("font-size", 22);
            e.cellElement.css("text-align", "center");
        }

        if (e.rowType == 'data' && e.column.dataField === "RESULT") {
            e.cellElement.css("color", e.data.RESULT == "OK" ? "" : "red");
            e.cellElement.css("font-size", 22);
            e.cellElement.css("text-align", "center");

        }
    }

    function btnSave_OnClick(e) {

        var plant = "P001";
        var proc = globalProcessCode;
        var eqp = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');

        if (proc == undefined || proc == null) {
            DevExpress.ui.dialog.alert('@LabelText.QUASTIONPLEASECHOOSEPROCESS', "warning");
            return;
        } else if (eqp == undefined || eqp == null) {
            DevExpress.ui.dialog.alert("설비를 선택해 주세요.", "warning");
            return;
        }

        var savefield = "SAMPLE"; // + displaySeq.toString();
        var grid = $('#grdSampleInspection').dxDataGrid('instance');
        var cnt = grid.totalCount();
        var inputchk = true;
        var okng = true;

        if (cnt <= 0) {
            DevExpress.ui.dialog.alert('조회된 검사 항목이 없습니다.', "warning");
            return;
        }

        if ($('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value')[0] == null) {
            DevExpress.ui.dialog.alert('검사자를 선택해 주세요.', "warning");
            return;
        }


        for (var Index = 0; Index < cnt; Index++) {
            var tmp = grid.cellValue(Index, "RESULT");
            if (tmp != null) {
                okng = false;
            }
            if (!okng)
                break;
        }

        if (okng) {
            DevExpress.ui.dialog.alert('입력된 검사 항목이 없습니다.', "warning", globalNotificationErrorTime);
            return;
        }


        var ordernum = $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value');
        var orderseq = $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value');
        var inspify = $('#formInfo').dxForm('instance').getEditor('INSPECTCLASSIFY').option('value');
       // var inspworker = $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value');
        var partnum = $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value');
        var inspector = $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value');
        var maxsample = sampleCount * inspectclassifycnt;

        var result = DevExpress.ui.dialog.confirm('@LabelText.QUESTIONINSERT', "Confirm changes");
        result.done(function(dialogResult) {
            if (!dialogResult) {
                return;
            } else {

                var aJsonResultArray = new Array();
                var aJsonSampleArray = new Array();
                var totalResult = true;
                var lastSampleCnt = 1;

                var sampleResult = true;
                for (var Index = 0; Index < cnt; Index++) {
                    if (grid.cellValue(Index, "RESULT") != null) {
                        var aJsonSample = new Object();
                        aJsonSample.PLANTCODE = plant;
                        aJsonSample.PARTNUMBER = partnum;
                        aJsonSample.PROCESSCODE = proc;
                        aJsonSample.EQUIPMENTCODE = eqp;
                        aJsonSample.INSPECTCODE = grid.cellValue(Index, "INSPECTCODE");
                        aJsonSample.LOTNUMBER = "";
                        //aJsonSample.INSPECTDATE
                        aJsonSample.INSPECTCLASSIFY = checkClassfiy(displaySeq);
                        aJsonSample.USL = grid.cellValue(Index, "USL");
                        aJsonSample.LSL = grid.cellValue(Index, "LSL");
                        aJsonSample.SPECCLASS = grid.cellValue(Index, "SPECCLASS");
                        aJsonSample.UCL = grid.cellValue(Index, "UCL");
                        aJsonSample.LCL = grid.cellValue(Index, "USL");
                        aJsonSample.CSL = grid.cellValue(Index, "USL");
                        aJsonSample.INSPECTNO = displaySeq;
                        //aJsonSample.INSPECTVALUE
                        aJsonSample.INSPECTVALUE_TEXT = grid.cellValue(Index, savefield + displaySeq );
                        aJsonSample.INSPECTRESULT = grid.cellValue(Index, "RESULT");//grid.cellValue(Index, "RESULT" + col.toString());

                        if (grid.cellValue(Index, "RESULT") == "NG" ) {
                            sampleResult = false;
                        }

                        aJsonSample.INSPECTOR = inspector == null ? null : inspector.toString();
                        aJsonSample.MEMO = grid.cellValue(Index, "DATATYPE");
                        aJsonSampleArray.push(aJsonSample);
                    } else {
                        sampleResult = false;
                        totalResult = false;
                    }
                }

                var aJsonResult = new Object();
                aJsonResult.PLANTCODE = plant;
                aJsonResult.PARTNUMBER = partnum;
                aJsonResult.PROCESSCODE = proc;
                aJsonResult.EQUIPMENTCODE = eqp;
                //aJsonResult.INSPECTDATE
                aJsonResult.INSPECTCLASSIFY = checkClassfiy(displaySeq);
                aJsonResult.INSPECTRESULT = sampleResult == true ? "OK" : "NG";
                aJsonResult.INSPECTOR = inspector == null ? null : inspector.toString();;
                aJsonResult.INSPECTNO = displaySeq;
                aJsonResult.ORDERNUMBER = ordernum;
                aJsonResult.ORDERSEQUENCE = orderseq;
                aJsonResultArray.push(aJsonResult);
                if (sampleResult)
                    lastSampleCnt = displaySeq;

                var source = {};
                var data = new Object();
                source.EQUIPMENTCODE = eqp;
                source.ORDERNUMBER = ordernum;
                source.ORDERSEQUENCE = orderseq;
                source.PARTNUMBER = partnum;
                source.INSPECTIONCLASSIFY = checkClassfiy(lastSampleCnt);
                source.TOTALSAMPLECOUNT = maxsample;
                source.CURRENTSAMPLECOUNT = lastSampleCnt;
                source.WORKER = inspector == null ? null : inspector.toString();;
                source.MEMO = totalResult == true ? "OK" : "NG";
                
                source.ResultList = aJsonResultArray;
                source.SampleList = aJsonSampleArray;

                data.data = JSON.stringify(source);

                $.ajax({
                    url: '@Url.Action("postSample", "QUAG011WebApi", new {httproute = "DefaultApi"})',
                    type: 'POST',
                    data: data,
                    success: function(data) {

                        if (data != null) {
                            if (data.length > 0) {
                                if (data[0].IsTotalComplete == true) {
                                    DevExpress.ui.dialog.alert("초종검사를 모두 완료 하였습니다.");

                                    window.open('', '_parent', '');
                                    window.close();
                                }
                            }
                            else if (data.length <= 0) {
                                $("#grdSampleInspection").dxDataGrid('instance').refresh();
                                $("#grdSampleInspection").dxDataGrid('instance').clearSelection();
                                DevExpress.ui.notify('@LabelText.ANSWERTRANPROCESS',
                                    'success',
                                    globalNotificationSuccessTime);

                                var eqp = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');
                                setWorkData(globalProcessCode, eqp);
                            }
                        } 

                    },
                    error: function(e) {
                        console.log(data);
                        showError(this, e);
                        //console.log("error");
                    }
                });
            }
        });
    }

    function grdSampleInspection_OnEditorPrepared(e) {
        if (e.parentType == 'dataRow') {
            var field = e.dataField.substring(0,5);
            var value = e.value;

            var onValueChanged = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = function (args) {
                onValueChanged.apply(this, arguments);

                if (field == "SAMPLE") {

                }
                //if (field == 'SELECTYN') {
                //    setRowQty();
                //} else if (field == 'ORDERQUANTITY') {

                //    var grid = $("#grdProcessequip").dxDataGrid("instance");
                //    var cnt = grid.totalCount();
                //    var result = 0;

                //    if (cnt > 0) {
                //        for (Index = 0; Index < cnt; Index++) {
                //            var YN = $('#grdProcessequip').dxDataGrid('instance').cellValue(Index, 'SELECTYN');
                //            if (YN == true) {
                //                result = result +
                //                    $('#grdProcessequip').dxDataGrid('instance').cellValue(Index, 'ORDERQUANTITY');
                //            }
                //        }
                //        $('#QTY').dxNumberBox('instance').option('onValueChanged', undefined);
                //        $('#form').dxForm('instance').option('formData.ORDERQUANTITY', result);
                //        $('#QTY').dxNumberBox('instance').option('onValueChanged', function (event) { setRowQty(); });
                //    }
                //}
            }

        }
    }
    function grdSampleInspection_OnToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        $.each(toolbarItems, function (_, item) {
            if (item.name === "saveButton" || item.name == "revetButton" || item.name == "addRowButton") {
                // Change the item options here
                item.visible = false;
            }
        });
    }

    function grdSampleInspection_OnInitialized(e) {

        initDateColumnHeader();
    }

    var tmp;
    function edittest(cellElement, cellInfo) {

        var insp = 3 + displaySeq;

        if (cellInfo.row.data.DATATYPE == "B") {
            $("<div />").dxRadioGroup({
                items: priorities,
                valueExpr:"CODE",
                displayExpr:"NAME",
                layout: "horizontal",
                disabled: !(cellInfo.columnIndex == 3 + displaySeq),
                value: cellInfo.value,
                onValueChanged: function(e) {
                    cellInfo.setValue(e.value);
                    if (cellInfo.value == "OK") {
                        cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'OK');
                        cellInfo.component.cellValue(cellInfo.rowIndex, ('RESULT').concat(cellInfo.columnIndex - 3), 'OK');
                    } else {
                        cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'NG');
                        cellInfo.component.cellValue(cellInfo.rowIndex, ('RESULT').concat(cellInfo.columnIndex - 3), 'OK');
                    }

                }
            }).appendTo(cellElement);
        } if (cellInfo.row.data.DATATYPE == "N") {
            $("<div />").dxNumberBox({
                format: "#,##0.00",
                value: cellInfo.value,
                disabled: !(cellInfo.columnIndex == 3 + displaySeq),
                onValueChanged: function(e) {
                    cellInfo.setValue(e.value);
                    var lsl = cellInfo.data.LSL;
                    var usl = cellInfo.data.USL;
                    var specclass = cellInfo.data.SPECCLASS;
                    var result = false;;

                    if (specclass == "B") {
                        if (lsl <= cellInfo.value && cellInfo.value <= usl)
                            result = true;
                    } else if (specclass == "L") {
                        if (lsl <= cellInfo.value)
                            result = true;
                    } else if (specclass == "U") {
                        if (cellInfo.value <= usl)
                            result = true;
                    }
                    if (result) {
                        cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'OK');
                        cellInfo.component.cellValue(cellInfo.rowIndex, ('RESULT').concat(cellInfo.columnIndex - 3), 'OK');
                    } else {
                        cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'NG');
                        cellInfo.component.cellValue(cellInfo.rowIndex, ('RESULT').concat(cellInfo.columnIndex - 3), 'OK');
                    }
                }
            }).appendTo(cellElement);
        } if (cellInfo.row.data.DATATYPE == "S") {
            $("<div />").dxTextBox({
                value: cellInfo.value,
                disabled: !(cellInfo.columnIndex == 3 + displaySeq),
                onValueChanged: function(e) {
                    cellInfo.setValue(e.value);
                }
            }).appendTo(cellElement);
        }
    }
    $(function () {
        checkGlobalProcess();
    });

    function initDateColumnHeader() {
        var grid = $('#grdSampleInspection').dxDataGrid('instance');
        var columns = grid.option("columns");

        var firstInspect = "초품 ";
        var endinspect = "종품 ";

        for (var i = 30; i >= sampleCount * inspectclassifycnt; i--) {
            var field = "SAMPLE" + (i + 1);
            grid.columnOption(field, 'visible', false);
        }

        var ColSampleNameIndex = 1;
        var ColSampleName = "";
        for (var i = 0; i < (sampleCount * 2); i++) {

            var field = ("SAMPLE").concat(i + 1);

            ColSampleName = firstInspect;

            if (sampleCount < ColSampleNameIndex) {
                ColSampleNameIndex = 1;
                ColSampleName = endinspect;
            }



            grid.columnOption(field, 'caption', ColSampleName.concat(ColSampleNameIndex));
            ColSampleNameIndex = ColSampleNameIndex + 1;
        }

    }



    
    function formInfo_OnContentReady(e) {
        e.component.getEditor('PROCESS').option('value', globalProcessCode);
        @*if (globalEquipmentCode != null) {

            if ('@EQPNAME' != '')
                e.component.getEditor('EQUIPMENT').option('value', '@EQPNAME');
            else
                e.component.getEditor('EQUIPMENT').option('value', globalEquipmentCode[0]);
        }*@

        if ('@EQPNAME' != '')
            e.component.getEditor('EQUIPMENT').option('value', '@EQPNAME');

        if ('@EMP' != '') {
            //e.component.getEditor('INSPECTOR').option('value', '@EMP');

            $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value', '@EMP'.split(','));
        }


        $.ajax({
            url: '@Url.Action("getSampleCount", "QUAG011WebApi", new { httproute = "DefaultApi", })',
            type: 'GET',
            async: false,
            success: function (data) {
                console.log("OK");
                console.log(data);
                var cnt = data.data[0].CNT;
                var maxcnt = data.data[0].MAXCNT;
                if (isNaN(cnt) == false)
                    sampleCount = Number(cnt) > Number(maxcnt) ? Number(maxcnt) : cnt;
                else
                    sampleCount = Number(maxcnt);
            },
            error: function (e) {
                showError(this, e);
            }
        });

        // 초/중/종 구분 cnt

        $.ajax({
            url: '@Url.Action("getInspClassify", "QUAG011WebApi", new { httproute = "DefaultApi", })',
            type: 'GET',
            async: false,
            success: function (data) {
                console.log("OK");
                console.log(data);
                inspectclassify = data.data;
                inspectclassifycnt = data.data[0] == undefined ? 1 : data.data[0].CNT == null ? 1 : undefined ? 1 : data.data[0].CNT;
            },
            error: function (e) {
                showError(this, e);
            }
        });


        console.log(sampleCount);
    }

    function grdOrderNumber_onBeforeSend(method, ajaxOptions) {
        if (method == "load") {

            ajaxOptions.data.processCode = globalProcessCode;
            ajaxOptions.data.equipmentCode = globalEquipmentCode;

        }
        else {
            ajaxOptions.data.processCode = "";
            ajaxOptions.data.equipmentCode = "";
        }
    }

    function grdSampleInspection_onBeforeSend(method, ajaxOptions) {
        if (method == "load") {
            if ($('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value') != null
                && $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value') != null
                && $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value') != null
                    )
            {
                ajaxOptions.data.ordernumber = $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value');
                ajaxOptions.data.orderSequence = $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value');
                ajaxOptions.data.partnumber = $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value');
                ajaxOptions.data.processCode = globalProcessCode;
                ajaxOptions.data.equipmentCode = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');
            }
            else {
                ajaxOptions.data.ordernumber = "";
                ajaxOptions.data.orderSequence = 0;
                ajaxOptions.data.partnumber = "";
                ajaxOptions.data.processCode = "";
                ajaxOptions.data.equipmentCode = "";
            }
        }
    }

    function Shift_onFocusIn(e) {

        var shift = $('#formInfo').dxForm('instance').getEditor('SHIFT').option('value');

        if (shift == '@SHIFTCODE.A')
            $('#formInfo').dxForm('instance').updateData('SHIFT', '@SHIFTCODE.B');
        else
            $('#formInfo').dxForm('instance').updateData('SHIFT', '@SHIFTCODE.A');
    }

    function setDisplaySeq(ordernum, orderseq) {

        var param = $.param({
            ordernumber: ordernum,
            ordersequence: orderseq
        });

        $.ajax({
            url: '@Url.Action("getSampleStatus", "QUAG011WebApi", new { httproute = "DefaultApi", })',
            async: false,
            data: param,
            type: 'GET',
            success: function (data) {
                console.log("OK");
                console.log(data);
                displaySeq = data.data[0] == undefined ? 0 : data.data[0].CURRENTSAMPLECOUNT == null ? 0 : undefined ? 0 : data.data[0].CURRENTSAMPLECOUNT;
                displaySeq++;

                $('#formInfo').dxForm('instance').updateData('INSPECTCLASSIFY', checkClassfiy(displaySeq));

                //inspectclassifycnt = data.data[0] == undefined ? 1 : data.data[0].CNT == null ? 1 : undefined ? 1 : data.data[0].CNT;
            },
            error: function (e) {
                showError(this, e);
            }
        });

    }

    //초종만 하면 아래의 소스가 잘되지만,
    //초중종까지 한다면 QUAG021뷰를 참조할 것.
    function checkClassfiy(rotationseq) {

        if (rotationseq <= sampleCount) {
            return inspectclassify[0].SYSCODE;
        } else if (sampleCount < sampleCount <= sampleCount * 2) {
            return inspectclassify[1].SYSCODE;
        } else {
            if (inspectclassify.length > 2)
                return inspectclassify[2].SYSCODE;
            else
                return inspectclassify[1].SYSCODE;
        }
    }

    function btnRefresh_OnClick(e) {
        var eqp = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');
        setWorkData(globalProcessCode, eqp);
    }

</script>
