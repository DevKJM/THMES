@using Microsoft.AspNet.Identity;

@using JSMES.WebUI.Alpha.App_GlobalResources;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.ViewModels.QUA.QUAK;
@using JSMES.WebUI.Alpha.ViewModels.COM;
@using JSMES.WebUI.Alpha.Models.LogStruct;

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="options">
                <div class="option">
                    <span>@LabelText.SELECT @LabelText.DATE</span>
                    @(Html.DevExtreme().DateBox()
                        .ID("searchFrom")
                        .Type(DateBoxType.Date)
                        .DisplayFormat(Format.MonthAndYear)
                        .CalendarOptions(c=>c.MaxZoomLevel(CalendarZoomLevel.Year))
                        .OnValueChanged("function(e){ $('#grdDefectHis').dxDataGrid('instance').refresh(); }")
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @(Html.DevExtreme().Chart()
                .ID("chtDefectSum")
                .Palette(VizPalette.GreenMist)
                .DataSource(new JS("chartData"))
                .Title("불량율 (PPM)")
                
                .Tooltip(t => t
                    .Enabled(true)
                    .Shared(true)
                    .Format(f=>f.Type(Format.FixedPoint).Precision(0))
                )
                .CommonSeriesSettings(s => s
                    .ArgumentField("WORKDATE")
                    .Label(l => l
                        .Visible(true)
                        .Format(f => f
                            .Type(Format.FixedPoint)
                            .Precision(0)
                        )
                    )
                )
                .Series(s => {
                    s.Add()
                        .Type(SeriesType.Bar)
                        .ArgumentField("WORKDATE")
                        .ValueField("VALUE");
                })
                .Legend(l => l
                    .VerticalAlignment(VerticalEdge.Top)
                    .Visible(false)
                    .HorizontalAlignment(HorizontalAlignment.Center)
                ))
        </div>
    </div>
     <div class="row mt-2"">
        <div class="col-lg-12">
            @(Html.DevExtreme().DataGrid<QUAK057_LIST>()
                .ID("grdDefectHis")
                .DataSource(d => d.WebApi()
                    .Controller("QUAK057WebApi")
                    .Key("DEFECTCODE")
                    .OnBeforeSend("grdDefectHis_OnBeforeSend")
                    .OnLoaded("grdDefectHis_OnLoaded")
                )
                .FilterRow(f=>f.Visible(true))
                .ShowRowLines(true)
                .Columns(columns =>
                {
                    columns.AddFor(m=>m.SORT).SortOrder(SortOrder.Asc).Visible(false);
                    columns.AddFor(m=>m.DEFECTCODE).Visible(false);
                    columns.AddFor(m=>m.DEFECTNAME).Width(130);
                    columns.AddFor(m=>m.DEF1).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF2).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF3).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF4).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF5).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF6).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF7).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF8).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF9).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF10).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF11).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF12).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF13).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF14).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF15).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF16).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF17).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF18).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF19).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF20).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF21).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF22).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF23).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF24).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF25).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF26).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF27).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF28).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF29).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF30).Format(f=>f.Type(Format.FixedPoint)).Width(60);
                    columns.AddFor(m=>m.DEF31).Format(f=>f.Type(Format.FixedPoint)).Width(60);                    
                })
                .ColumnHidingEnabled(false)
                .SearchPanel(c=>c.Visible(true))
                .RemoteOperations(true)
                .Paging(p=>p.PageSize(25).Enabled(true))
                .WordWrapEnabled(true)
                .Pager(p=>p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[]{ 10, 25, 50, 100, 1000}))
                .AllowColumnResizing(true)
                .RowAlternationEnabled(true)
                .OnRowPrepared("grdDefectHis_OnRowPrepared")
            )
        </div>
     </div>
</div>

<script>

    function grdDefectHis_OnRowPrepared(e) {
        if (e.rowType == 'data') { 
            if (e.data.DEFECTCODE == "DEFECTPPM") {
                e.rowElement.css('background', 'rgba(60,186,178,1)'); 
            } else if (e.data.DEFECTCODE == "SUMDEFECT") {
                e.rowElement.css('background', 'rgba(60,186,178,0.5)'); 
            } else if (e.data.DEFECTCODE == "WORKQUANTITY"){
                e.rowElement.css('background', 'rgba(60,186,178,0.3)'); 
            }            
        }
    }
    
    function grdDefectHis_OnLoaded(e) {
        chartData = [];        
        var grid = $('#grdDefectHis').dxDataGrid('instance');
        var searchFrom = $('#searchFrom').dxDateBox('instance').option("value");
        searchFrom = new Date(searchFrom);
        var maxDate = (new Date(searchFrom.getFullYear(), searchFrom.getMonth() + 1, 0)).getDate();
        var startDate = (new Date(searchFrom.getFullYear(), searchFrom.getMonth(), 1));
        var weekDay = Globalize.dateFormatter({raw: "EEE"});
        
        for (var colIndex = 1; 31 >= colIndex; colIndex++) {
            var field = "DEF" + colIndex;
            grid.columnOption(field, "caption", Globalize.unitFormatter("day")(colIndex) + "  (" + weekDay(startDate.addDays(colIndex-1)) + ")");
            
            if(maxDate < colIndex ){
                grid.columnOption(field, "visible", false);
            }
        }

        var defectPpm = e.find(function(e){ 
                                if(e.DEFECTCODE == "DEFECTPPM") { 
                                        return e; 
                                    }   
                                });

        if (defectPpm != undefined) {
             var dataIndex = 1;

            do {
                if (defectPpm['DEF' + dataIndex] == undefined) {
                    break;
                }

                if(maxDate < dataIndex ){
                    break;
                }

                chartData.push({WORKDATE: Globalize.unitFormatter("day")(dataIndex) , VALUE: defectPpm['DEF' + dataIndex]});            
                dataIndex++;
            }
            while(true);

        }
       
        $("#chtDefectSum").dxChart("instance").option("dataSource", chartData);
    }

    function grdDefectHis_OnBeforeSend(method, ajaxOptions) {
        if (method == "load") {
            var searchFrom = $('#searchFrom').dxDateBox('instance').option("value");
            ajaxOptions.data.searchDate = Globalize.formatDate((searchFrom),{dateTime:'short'});
        }
    }

    var chartData = [];

    $(function(){
        $("#searchFrom").dxDateBox("instance").option("value", new Date());
    })

    function searchFrom_OnValueChanged(e) {
        $('#pie').dxPieChart('instance').refresh();
        $('#chtDefectSum').dxChart('instance').refresh();
    }

    function searchTo_OnValueChanged(e) {
        $('#chtDefectSum').dxChart('instance').refresh();
    }
</script>