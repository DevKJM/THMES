@using JSMES.WebUI.Alpha.ViewModels.MST.MSTA;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;
@using JSMES.WebUI.Alpha.Models.LogStruct

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div id="noSelectProcessMessage"  class="alert alert-info alert-dismissible fade show" role="alert" style="width:100%">
                <i class="fa fa-info-circle"></i> 첨부파일에 user.png를 등록하면 사진이 표시 됩니다. 가로 세로 비율은 1:1 입니다.
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <h4><span class="bottom-gradient"><i class="fa fa-angle-right"> @LabelText.USERLIST</i></span></h4>
            @(Html.DevExtreme().DataGrid<MSTA004_LIST>()
                  .ID("grdHRMaster")
                  .DataSource(d => d.WebApi().Controller("MSTA004WebApi").Key("HRID"))
                  .Columns(columns =>
                  {
                      columns.Add().CellTemplate(new JS("grdHRMaster_PHOTO_CellTemplate")).Width(45);

                      columns.AddFor(m => m.EMPCODE);
                      columns.AddFor(m => m.EMPNAME);
                      columns.AddFor(m => m.EMPPHOTO)
                          .ShowEditorAlways(true)
                          .EditCellTemplate(new JS("grdHRMaster_EMPPHOTO_EditCellTemplate"))
                          ;
                      columns.AddFor(m => m.HRCODE);
                      columns.AddFor(m => m.DEPARTMENT)
                          .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                              .Controller("COMA003WebApi").Key("SYSCODE")
                              .LoadAction("DEPARTMENT_LIST"))
                              .DisplayExpr("SYSCODENAME")
                              .ValueExpr("SYSCODE")
                          );
                      columns.AddFor(m => m.POSITION)
                          .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                              .Controller("COMA003WebApi").Key("SYSCODE")
                              .LoadAction("POSITION_LIST"))
                              .DisplayExpr("SYSCODENAME")
                              .ValueExpr("SYSCODE")
                          );
                      columns.AddFor(m => m.PLANTCODE)
                          .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                              .Controller("COMA001WebApi").Key("PLANTCODE")
                              .LoadAction("PLANT_LIST"))
                              .DisplayExpr("PLANTNAME")
                              .ValueExpr("PLANTCODE")
                          );
                      columns.AddFor(m => m.WORKYN).Lookup(c => c.DataSource(new JS("USE_YN"))
                          .DisplayExpr("NAME")
                          .ValueExpr("CODE"));
                      ;

                      columns.AddFor(m => m.CREATEUSER);
                      columns.AddFor(m => m.CREATEDATE).Format(f => f.Type(Format.ShortDateShortTime));
                      ;
                      columns.AddFor(m => m.RECENTUSER);
                      columns.AddFor(m => m.RECENTDATE).Format(f => f.Type(Format.ShortDateShortTime));
                      ;
                  })
                  .Selection(s => s.Mode(SelectionMode.None))
                  .RemoteOperations(true)
                  .FilterPanel(f => f.Visible(true))
                  .ColumnAutoWidth(true)
                  .Paging(p => p.PageSize(25).Enabled(true))
                  .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] {10, 25, 50, 100, 1000}))
                  .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                  .KeyboardNavigation(options =>
                  {
                      // MoveFocus : 엔터시 이동
                      // startEdit : 엔터시 EditMode 다시 엔터시 이동
                      options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                      // 엔터 이외 키 입력시 EditMode 여부
                      options.EditOnKeyPress(true);
                      // Row : 엔터시 열 단위 이동 →
                      // Column : 엔터시 행 단위 이동 ↓
                      options.EnterKeyDirection(GridEnterKeyDirection.Column);
                  })
                  .SearchPanel(searchPanel => searchPanel
                      .Visible(true)
                      .Width(180)
                      .Placeholder("Search...")
                  )
                  .FilterRow(filterRow => filterRow
                      .Visible(true)
                      .ApplyFilter(GridApplyFilterMode.Auto)
                  )
                  .Editing(e =>
                      e.Mode(GridEditMode.Batch)
                          .AllowAdding(new JS("iudAuth()"))
                          .AllowUpdating(new JS("iudAuth()"))
                          .AllowDeleting(new JS("iudAuth()"))
                  )
                  .ShowRowLines(true)
                  .ShowBorders(true)
                  .AllowColumnResizing(true)
                  .RowAlternationEnabled(true)
                  .OnInitialized("grdHRMaster_OnInitialized")
                  .OnInitNewRow("grdHRMaster_OnInitNewRow")
                  .Option("KEY_FIELD", new object[] {"HRID", "EMPCODE"})
                  .Option("INIT_FIELD", new object[] {"WORKYN"})
                  )
        </div>
    </div>
</div>


@*첨부 팝업 _ FORM*@
@(Html.DevExtreme().Popup()
      .ID("ATTACHMENTS_POPUP")
      .ElementAttr("class", "popup")
      .ShowTitle(true)
      .DragEnabled(true)
      .ContentTemplate(new TemplateName("EmbeddedUploader"))
      .FullScreen(false)
      .Animation(a=>a.Show(s=>s.Direction(Direction.Top).Type(AnimationType.SlideIn)))
      .ShowCloseButton(true)
      .Width(1000)
      .Height(600)
      .Title("첨부파일 업로드")
      .OnHidden("ATTACHMENTS_POPUP_OnHidden")
      .OnShowing("ATTACHMENTS_POPUP_OnShowing"))

@using (Html.DevExtreme().NamedTemplate("EmbeddedUploader"))
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-primary" role="alert"> <i class="fa fa-exclamation-triangle"></i> 최대 업로드 허용 크기는 5Mb 입니다. 파일 확장자에 따라 업로드가 불가능 할 수 있습니다.</div>
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <div id="fileuploadWarningMessage" class="alert alert-danger" role="alert"> <i class="fa fa-exclamation-triangle"></i> 업로드 파일에 문제가 있습니다. 목록에서 확인하세요.</div>
                @(Html.DevExtreme().ScrollView()
                              .ID("uploaderScrollView")
                              .ScrollByContent(true)
                              .ScrollByThumb(true)
                              .Height(400)
                              .Content(@<text>
                                @(Html.DevExtreme().FileUploader().ID("fileUploader")
                                              .Name("attachmentFile")
                                              .ID("attachmentFileUploader")
                                              .Multiple(true)
                                              .Accept("*")
                                              .UploadButtonText("업로드")
                                              .UploadMode(FileUploadMode.Instantly)
                                              .UploadUrl(Url.Action("UploadFiles", "Attachment"))
                                              .OnValueChanged("attachmentFileUploader_OnValueChanged")
                                              .OnUploadError("attachmentFileUploader_OnUploadError")
                                              .OnUploaded("attachmentFileUploader_OnUploaded")
                                )
                            </text>))

                <div class="container-fluid">
                    <div class="row">
                        <div class="col-12">
                            @(Html.DevExtreme().Button()
                                          .ID("uploadFileListClear")
                                          .Width("100%")
                                          .Text("목록 지우기")
                                          .Disabled(new JS("!iudAuth()"))
                                        .Visible(true)
                                          .OnClick("function(e) { $('#attachmentFileUploader').dxFileUploader('instance').reset(); $('#uploadFileListAccept').dxButton('instance').option('disabled', true); }"))
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-8">
                @(Html.DevExtreme().DataGrid<AttachmentFiles>()
                              .ID("grdFileList")
                              .ShowBorders(true)
                              .Height(480)
                              .ColumnAutoWidth(true)
                              .ShowRowLines(true)
                              .RowAlternationEnabled(true)
                              .AllowColumnResizing(true)
                              .Selection(s => s.Mode(SelectionMode.Multiple))
                              .OnToolbarPreparing("grdFileList_OnToolbarPreparing")
                              .DataSource(d => d.WebApi()
                                  .Controller("COMA004WebApi")
                                  .LoadAction("getFileList")
                                  .OnBeforeSend("grdFileList_OnBeforeSend")
                                  .Key("FILEID")
                              )
                              .Columns(columns =>
                              {
                                  columns.AddFor(m => m.FILENAME).CellTemplate(new JS("grdFileList_FILENAME_CellTemplate")).SortOrder(SortOrder.Asc).AllowEditing(false);
                                  columns.AddFor(m => m.FILEEXTENSION).CellTemplate(new JS("grdFileList_FILEEXTENSION_CellTemplate")).Width(30).AllowEditing(false).Visible(false);
                                  columns.AddFor(m => m.FILESIZE).Format(f => f.Type(Format.FixedPoint).Precision(0)).AllowEditing(false).Visible(false);
                                  columns.AddFor(m => m.MEMO);
                                  columns.AddFor(m => m.CREATEDATE).AllowEditing(false).Visible(false);
                                  columns.AddFor(m => m.CREATEUSER).AllowEditing(false).Visible(false);
                              })
                              .OnCellPrepared("grdFileList_OnCellPrepared")
                              .OnInitialized("function(e){userCustomGrid(e);}")
                              .MasterDetail(md =>
                              {
                                  md.Enabled(true);
                                  md.Template(@<text>
                                    @(Html.DevExtreme().DataGrid<AttachmentFiles>()
                                                  .ColumnAutoWidth(true)
                                                  .ShowBorders(true)
                                                  .Columns(columns =>
                                                  {
                                                                  columns.AddFor(m => m.FILENAME).CellTemplate(new JS("grdFileList_OnCellPrepared_FILENAME_CellTemplate")).AllowEditing(false);
                                                                  columns.AddFor(m => m.REVISIONNO).SortOrder(SortOrder.Desc).AllowEditing(false);
                                                                  columns.AddFor(m => m.FILEEXTENSION).CellTemplate(new JS("grdFileList_detail_FILEEXTENSION_CellTemplate")).AllowEditing(false);
                                                                  columns.AddFor(m => m.FILESIZE).CalculateCellValue("function(rowData) { return rowData.FILESIZE; }").Format(f => f.Type(Format.FixedPoint).Precision(0)).AllowEditing(false);
                                                                  columns.AddFor(m => m.MEMO);
                                                                  columns.AddFor(m => m.CREATEDATE).AllowEditing(false).Format(f => f.Type(Format.ShortDateShortTime));
                                                                  columns.AddFor(m => m.CREATEUSER).AllowEditing(false);
                                                              })
                                                  .Editing(e => e.AllowUpdating(new JS("iudAuth()")).Mode(GridEditMode.Batch))
                                                  .DataSource(d => d.WebApi()
                                                      .Controller("COMA004WebApi")
                                                      .LoadAction("getFileRevisionList")
                                                      .Key("FILEID")
                                                      .LoadParams(new { fileId = new JS("data.FILEID") })
                                                  )
                                                  .OnInitialized("function(e){userCustomGrid(e);}")
                                    )
                                </text>);
                              })
                      .Option("DELETE_IGNORE", true)
                            .Editing(e => e.AllowDeleting(new JS("iudAuth()")).AllowUpdating(new JS("iudAuth()")).Mode(GridEditMode.Batch))
                )
            </div>
        </div>
    </div>
}
<script type="text/javascript">

    function grdHRMaster_PHOTO_CellTemplate(container, options) {
        var imageSrc = '';

        if (options.data.ATTACHMENTFOLDERID != null) {
            imageSrc = rootURL +"Content/Files/Attachments/" + options.data.ATTACHMENTFOLDERID + "/" +
                options.data.REVISIONID + "/" + options.data.REVISIONNO + "/" + options.data.FILENAME;
        } else {
            imageSrc = rootURL +"Content/Images/Avatar/default_user.png";
        }     

        $("<div>")
                .append($("<img>", { "src": imageSrc, "class": "img-circle", width:35, height:35 }))
                .appendTo(container);
    }

    function grdHRMaster_OnInitialized(e) {
        userCustomGrid(e);
    }

    function grdHRMaster_OnInitNewRow(e) {
        e.data.EMPPHOTO = new DevExpress.data.Guid().toString();
    }

    function grdHRMaster_EMPPHOTO_EditCellTemplate(container, options) {

        $("<div />").dxSelectBox({
            dataSource: DevExpress.data.AspNet.createStore({
                key: "FILEID",
                loadUrl: rootURL + "api/COMA004WebApi/getFileList",
                loadParams: { folderId: options.data.EMPPHOTO },
            }),
            valueExpr: 'FILEID',
            displayExpr: 'FILENAME',
            onItemClick: function (e) {
                var path = rootURL + 'Content/Files/Attachments/' + e.itemData.ATTACHMENTFOLDERID + '/' + e.itemData.REVISIONID + '/' + e.itemData.REVISIONNO + '/' + e.itemData.FILENAME;
                var x=new XMLHttpRequest();
	            x.open("GET", path, true);
	            x.responseType = 'blob';
	            x.onload=function(o){download(x.response, e.itemData.FILENAME, e.itemData.FILEEXTENSION ); }
	            x.send();
            },
             buttons: [{
                name: "download",
                location: "after",
                options: {
                    icon: "download",
                    type: "normal",
                    EMPPHOTO: options.data.EMPPHOTO,
                    onClick: function() {
                       var data = {};
                        var aJson = new Object();
                        aJson.ATTACHMENTFOLDERID = this.option('EMPPHOTO');
                        data.values = JSON.stringify(aJson);

                        $.ajax({
                            url: '@Url.Action("getAllZipFileList", "COMA004WebApi", new { httproute = "DefaultApi", })',
                            type: 'POST',
                            data: data,
                            success: function (param) {
                                if (param.ZipFileName == '') {
                                    DevExpress.ui.notify('등록된 파일이 없습니다.', 'warning', globalNotificationErrorTime);
                                } else {
                                    window.location = rootURL + 'Attachment/DownloadFile?TempZipGuid=' + param.TempZipGuid
                                    + '&ZipFileName=' + param.ZipFileName;
                                }                                                    
                            },
                            error: function (e) {
                                showError(this, e);
                            }
                        });
                    }
                }
            },{
                name: "upload",
                location: "after",
                options: {
                    icon: "upload",
                    type: "normal",
                    EMPPHOTO: options.data.EMPPHOTO,
                    onClick: function() {
                        var fileUploadGuid = this.option('EMPPHOTO');

                        if (fileUploadGuid == null || fileUploadGuid == undefined) {
                            DevExpress.ui.notify('업로드 정보가 없습니다. 관리자에게 문의하세요.', 'error', globalNotificationErrorTime);
                        } else {
                            $('#ATTACHMENTS_POPUP').dxPopup('instance').option('fileUploadGuid', fileUploadGuid);
                            $('#ATTACHMENTS_POPUP').dxPopup('instance').show();
                            $('#attachmentFileUploader').dxFileUploader('instance').option('accept', 'image/*');
                        }
                    }
                }
            }],
            itemTemplate: function (itemData, itemIndex, itemElement) {
                var className = '';

                if (itemData.FILEEXTENSION == "image/png" || itemData.FILEEXTENSION == "image/jpeg") {
                    className = "fa-file-image-o fa-lg";
                } else if (itemData.FILEEXTENSION == "audio") {
                    className = "fa-file-audio-o fa-lg";
                } else if (itemData.FILEEXTENSION == "video") {
                    className = "fa-file-movie-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/pdf") {
                    className = "fa-file-pdf-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/msword" ||
                    itemData.FILEEXTENSION == "application/vnd.ms-word" ||
                    itemData.FILEEXTENSION == "application/vnd.oasis.opendocument.text" ||
                    itemData.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.wordprocessingml") {
                    className = "fa-file-pdf-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/vnd.ms-excel" ||
                    itemData.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.spreadsheetml" ||
                    itemData.FILEEXTENSION == "application/vnd.oasis.opendocument.spreadsheet") {
                    className = "fa-file-excel-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/vnd.ms-powerpoint" ||
                    itemData.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.presentationml" ||
                    itemData.FILEEXTENSION == "application/vnd.oasis.opendocument.presentation") {
                    className = "fa-file-powerpoint-o fa-lg";
                } else if (itemData.FILEEXTENSION == "text/plain") {
                    className = "fa-file-o fa-lg";
                } else if (itemData.FILEEXTENSION == "text/html" || options.value == "application/json") {
                    className = "fa-file-text-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
                    className = "fa-file-word-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
                    className = "fa-file-excel-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.presentationml.presentation") {
                    className = "fa-file-powerpoint-o fa-lg";
                } else if (itemData.FILEEXTENSION == "application/gzip" ||
                    itemData.FILEEXTENSION == "application/zip" ||
                    itemData.FILEEXTENSION == "application/x-zip-compressed" ||
                    itemData.FILEEXTENSION == "application/octet-stream" ||
                    itemData.FILEEXTENSION == "application/x-msdownload") {
                    className = "fa-file-archive-o fa-lg";
                }

                content = "<div><i class='fa " + className + "'></i>" + itemData.FILENAME + "</div>";
                return content;
            }
        }).appendTo(container);    
    }
    
    function grdFileList_OnToolbarPreparing(e) {
        e.toolbarOptions.items.unshift(
            {
                location: "after",
                widget: "dxButton",
                options: {
                    hint: "",
                    icon: "fa fa-download",
                    onClick: function () {
                        var grid = $('#grdFileList').dxDataGrid('instance');
                        var aJsonArray = new Array();
                        grid.getSelectedRowsData().forEach(function (e) {

                            var aJson = new Object();
                            aJson.ATTACHMENTFOLDERID = e.ATTACHMENTFOLDERID;
                            aJson.FILEID = e.FILEID;
                            aJson.REVISIONID = e.REVISIONID;
                            aJson.FILENAME = e.FILENAME;
                            aJson.FILESIZE = e.FILESIZE;
                            aJson.FILEEXTENSION = e.FILEEXTENSION;
                            aJson.ISREVISION = e.ISREVISION;
                            aJson.REVISIONNO = e.REVISIONNO;
                            aJson.MEMO = e.MEMO;
                            aJsonArray.push(aJson);
                        });

                        if (aJsonArray.length > 0) {
                            var data = {};
                            data.values = JSON.stringify(aJsonArray);

                            $.ajax({
                                url: '@Url.Action("getZipFileList", "COMA004WebApi", new { httproute = "DefaultApi", })',
                                type: 'POST',
                                data: data,
                                success: function (param) {
                                    window.location = rootURL + 'Attachment/DownloadFile?TempZipGuid=' + param.TempZipGuid
                                        + '&ZipFileName=' + param.ZipFileName;
                                },
                                error: function (e) {
                                    showError(this, e);
                                }
                            });
                        } else {
                            DevExpress.ui.notify('zip으로 다운로드할 파일을 선택해주세요.', 'error', globalNotificationErrorTime);
                        }
                    }
                }
            });
    }
    
    function ATTACHMENTS_POPUP_OnShowing(e) {
        var data = new Object();
        var fileUploadGuid = e.component.option('fileUploadGuid');
        $('#attachmentFileUploader').dxFileUploader('instance').option('fileUploadGuid', fileUploadGuid);
        $('#grdFileList').dxDataGrid('instance').option('fileUploadGuid', fileUploadGuid);
        data.ATTACHMENTFOLDERID = fileUploadGuid;
        $('#uploaderScrollView').dxScrollView('instance').option('height', 455);

        $.ajax({
            url: '@Url.Action("setFolder", "COMA004WebApi", new { httproute = "DefaultApi" })',
            type: 'POST',
            data: data,
            error: function(e) {
                showError(this, e);
            }
        });

        $('#attachmentFileUploader').dxFileUploader('instance').element().find(".dx-fileuploader-button.dx-button.dx-button-normal.dx-button-mode-contained.dx-widget.dx-button-has-text")
            .on('click', function(e) {
                $('#attachmentFileUploader').dxFileUploader('instance').reset();
                $('#uploaderScrollView').dxScrollView('instance').option('height', 455);
                $('#fileuploadWarningMessage').hide();
            });

        $('#fileuploadWarningMessage').hide();
        $('#grdFileList').dxDataGrid('instance').refresh();
        $('#attachmentFileUploader').dxFileUploader('instance').reset();
    }
    
    function ATTACHMENTS_POPUP_OnHidden(e) {
        if($('#folderGuid').dxTextBox('instance') != undefined)
            $('#folderGuid').dxTextBox('instance').option('value', '');
    }

    function attachmentFileUploader_OnValueChanged(e) {
        var url = e.component.option("uploadUrl");
        var fileUploadGuid = e.component.option("fileUploadGuid");
        url = updateQueryStringParameter(url, "FolderGuid", fileUploadGuid);
        e.component.option("uploadUrl", url);
    }

    function grdFileList_OnBeforeSend(method, ajaxOptions) {
        if (method == "load") {
            ajaxOptions.data.folderId = $('#grdFileList').dxDataGrid('instance').option('fileUploadGuid');
        }
    }

    function grdFileList_FILENAME_CellTemplate(container, options) {
        var className = '';

        if (options.data.FILEEXTENSION == "image") {
            className = "fa-file-image-o fa-lg";
        } else if (options.data.FILEEXTENSION == "audio") {
            className = "fa-file-audio-o fa-lg";
        } else if (options.data.FILEEXTENSION == "video") {
            className = "fa-file-movie-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/pdf") {
            className = "fa-file-pdf-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/msword" ||
            options.data.FILEEXTENSION == "application/vnd.ms-word" ||
            options.data.FILEEXTENSION == "application/vnd.oasis.opendocument.text" ||
            options.data.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.wordprocessingml") {
            className = "fa-file-pdf-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/vnd.ms-excel" ||
            options.data.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.spreadsheetml" ||
            options.data.FILEEXTENSION == "application/vnd.oasis.opendocument.spreadsheet") {
            className = "fa-file-excel-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/vnd.ms-powerpoint" ||
            options.data.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.presentationml" ||
            options.data.FILEEXTENSION == "application/vnd.oasis.opendocument.presentation") {
            className = "fa-file-powerpoint-o fa-lg";
        } else if (options.data.FILEEXTENSION == "text/plain") {
            className = "fa-file-o fa-lg";
        } else if (options.data.FILEEXTENSION == "text/html" || options.value == "application/json") {
            className = "fa-file-text-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
            className = "fa-file-word-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
            className = "fa-file-excel-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/vnd.openxmlformats-officedocument.presentationml.presentation") {
            className = "fa-file-powerpoint-o fa-lg";
        } else if (options.data.FILEEXTENSION == "application/gzip" ||
            options.data.FILEEXTENSION == "application/zip" ||
            options.data.FILEEXTENSION == "application/x-zip-compressed" ||
            options.data.FILEEXTENSION == "application/octet-stream" ||
            options.data.FILEEXTENSION == "application/x-msdownload") {
            className = "fa-file-archive-o fa-lg";
        }

        var formatterNumber = Globalize.numberFormatter({
            minimumSignificantDigits: 1,
            maximumSignificantDigits: 3
        });

        var path = rootURL + 'Content/Files/Attachments/' + options.data.ATTACHMENTFOLDERID + '/' + options.data.REVISIONID + '/' + options.data.REVISIONNO + '/' + options.data.FILENAME;

        var markup = "<table>" +
                "<thead>" +
                "<tr>" +
                "<th style='padding-right:5px;width:15%'></th><th style='padding-right:5px;width:60%'></th><th style='padding-right:5px;width:10%'></th><th style='padding-left:5px;width:10%'></th>" +
                "</tr>" +
                "</thread>" +
                "<tbody>" +
                "<tr>" +
                "<td style='padding:5px;'> 파일 명</td><td style='padding:5px;'><span class='fa " + className + "' /> <a href='" + path + "'>" + options.data.FILENAME + "</a></td>" +
                "<td style='padding:5px;'> 리비전 </td><td style='padding:5px;'>" + options.data.REVISIONNO + "</td>" +
                "</tr>" +
                "<tr>" +
                "<td style='padding:5px;'> 파일 용량</td><td colspan=3>" + (formatterNumber((options.data.FILESIZE  / 1024.0) / 1024)) + " Mb</td>" +
                "</tr>" +
                "<tr>" +
                "<td style='padding:5px;'> 등록일</td><td colspan=3>" + Globalize.dateFormatter({ datetime: "medium"})(new Date(options.data.CREATEDATE)) + "</td>" +
                "</tr>" +
                "<tr>" +
                "<td style='padding:5px;'> 등록자</td><td colspan=3>" + options.data.CREATEUSER + "</td>" +
                "</tr>" +
                "</tbody>" +
                "</table>"
            ;

        container.append(markup);
    }

    function grdFileList_OnCellPrepared_FILENAME_CellTemplate(container, options) {
        setFiledownloadPath(container, options);
    }

    function grdFileList_OnCellPrepared(e) {
        if (e.rowType === "data" && e.column.command === "expand") {
            if (e.data.REVISIONNO == 0) {
                e.cellElement.removeClass("dx-datagrid-expand");
                e.cellElement.empty();
            }
        }
    }

    function setFiledownloadPath(container, options) {
        var path = rootURL + 'Content/Files/Attachments/' + options.data.ATTACHMENTFOLDERID + '/' + options.data.REVISIONID + '/' + options.data.REVISIONNO + '/' + options.data.FILENAME ;
        $('<a>' + options.value + '</a>')
            .attr('href', path)
            .attr('target', '_blank')
            .appendTo(container);
    }

    function setExtensionIcon(container, options) {
        var className = '';

        if (options.value == "image") {
            className = "fa-file-image";
        } else if (options.value == "audio") {
            className = "fa-file-audio fa-lg";
        } else if (options.value == "video") {
            className = "fa-file-video fa-lg";
        } else if (options.value == "application/pdf") {
            className = "fa-file-pdf fa-lg";
        } else if (options.value == "application/msword" ||
            options.value == "application/vnd.ms-word" ||
            options.value == "application/vnd.oasis.opendocument.text" ||
            options.value == "application/vnd.openxmlformats-officedocument.wordprocessingml") {
            className = "fa-file-pdf fa-lg";
        } else if (options.value == "application/vnd.ms-excel" ||
            options.value == "application/vnd.openxmlformats-officedocument.spreadsheetml" ||
            options.value == "application/vnd.oasis.opendocument.spreadsheet") {
            className = "fa-file-excel fa-lg";
        } else if (options.value == "application/vnd.ms-powerpoint" ||
            options.value == "application/vnd.openxmlformats-officedocument.presentationml" ||
            options.value == "application/vnd.oasis.opendocument.presentation") {
            className = "fa-file-powerpoint fa-lg";
        } else if (options.value == "text/plain") {
            className = "fa-file-alt fa-lg";
        } else if (options.value == "text/html" || options.value == "application/json") {
            className = "fa-file-code fa-lg";
        } else if (options.value == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
            className = "fa-file-word fa-lg";
        } else if (options.value == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
            className = "fa-file-excel fa-lg";
        } else if (options.value == "application/vnd.openxmlformats-officedocument.presentationml.presentation") {
            className = "fa-file-powerpoint fa-lg";
        } else if (options.value == "application/gzip" ||
            options.value == "application/zip" ||
            options.value == "application/x-zip-compressed" ||
            options.value == "application/octet-stream" ||
            options.value == "application/x-msdownload") {
            className = "fa-file-archive fa-lg";
        }

        $("<span class='fa " + className + "' />")
            .appendTo(container);
    }

    function grdFileList_FILEEXTENSION_CellTemplate(container, options) {
        setExtensionIcon(container, options);
    }

    function grdFileList_detail_FILEEXTENSION_CellTemplate(container, options) {
        setExtensionIcon(container, options);
    }


    function attachmentFileUploader_OnUploaded(e) {
        $("#grdFileList").dxDataGrid("instance").refresh();
        $('#uploaderScrollView').dxScrollView('instance').option('height', 455);
        $('#fileuploadWarningMessage').hide();
    }

    function attachmentFileUploader_OnUploadError(e) {
        $('#uploaderScrollView').dxScrollView('instance').option('height', 380);
        $('#fileuploadWarningMessage').show();
    }
    
    function updateQueryStringParameter (uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
        }
        else {
            return uri + separator + key + "=" + value;
        }
    }

</script>