@using JSMES.WebUI.Alpha.ViewModels.MST.MSTA;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-xl-5 col-md-5 mt-lg-0 mt-md-0">
            <h4><span class="bottom-gradient"><i class="fa fa-angle-right"> @LabelText.USERLIST</i></span></h4>
            @(Html.DevExtreme().DataGrid<MSTA001_LIST>()
                    .ID("grdEmpMaster")
                    .DataSource(d => d.WebApi().Controller("MSTA001WebApi").Key("EMPID"))
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.EMPCODE).Lookup(l => l.DataSource(d => d.WebApi()
                            .Controller("COMA001WebApi")
                            .LoadAction("HR_LIST")
                            .Key("EMPCODE")
                            )
                            .ValueExpr("EMPCODE")
                            .DisplayExpr("EMPNAME")
                            );
                        columns.AddFor(m => m.EMPGRPCODE)
                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                            .Controller("COMA001WebApi").Key("EMPGRPCODE")
                            .LoadAction("EMP_GROUP_LIST"))
                            .DisplayExpr("EMPGRPNAME")
                            .ValueExpr("EMPGRPCODE")
                        );
                        columns.AddFor(m => m.PLANTCODE)
                          .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                            .Controller("COMA001WebApi").Key("PLANTCODE")
                            .LoadAction("PLANT_LIST"))
                            .DisplayExpr("PLANTNAME")
                            .ValueExpr("PLANTCODE")
                          );
                        columns.AddFor(m => m.DEPARTMENT)
                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("DEPARTMENT_LIST"))
                                .DisplayExpr("SYSCODENAME")
                                .ValueExpr("SYSCODE")
                              );
                        columns.AddFor(m => m.POSITION)
                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("POSITION_LIST"))
                                .DisplayExpr("SYSCODENAME")
                                .ValueExpr("SYSCODE")
                              );
                    })
                    .OnCellClick("grdEmpMaster_OnCellClick")
                    .OnEditorPrepared("grdEmpMaster_OnEditorPrepared")
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .RemoteOperations(true)
                    .FilterPanel(f => f.Visible(true))
                    .ColumnAutoWidth(true)
                    .Paging(p => p.PageSize(25).Enabled(true))
                    .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                    .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                    .SearchPanel(searchPanel => searchPanel
                        .Visible(true)
                        .Width(180)
                        .Placeholder("Search...")
                    )
                    .FilterRow(filterRow => filterRow
                        .Visible(true)
                        .ApplyFilter(GridApplyFilterMode.Auto)
                    )
                    .Editing(e =>
                        e.Mode(GridEditMode.Batch)
                        .AllowUpdating(new JS("iudAuth()"))
                    )
                    .ShowRowLines(true)
                    .ShowBorders(true)
                    .AllowColumnResizing(true)
                    .RowAlternationEnabled(true)
                    .OnInitialized("grdEmpMaster_OnInitialized")
                    .Option("KEY_FIELD", new object[] { "EMPCODE", "PLANTCODE", "DEPARTMENT", "POSITION" })
            )
        </div>
        <div class="col-xl-7 col-md-7 mt-lg-0 mt-md-0 mt-sm-2">
            <h4><span class="bottom-gradient"><i class="fa fa-angle-right"> @LabelText.MENULIST</i></span></h4>
            @(Html.DevExtreme().TreeList<MSTA003_LIST>()
                    .ID("treeEmpAuthority")
                    .DataSource(d => d.WebApi().Controller("MSTA003WebApi").Key("MENUID").OnBeforeSend("treeEmpAuthority_OnBeforeSend"))
                    .OnRowUpdating("treeEmpAuthority_onRowUpdating")
                    .OnCellClick("treeEmpAuthority_OnCellClick")
                    .OnToolbarPreparing("treeEmpAuthority_OnToolbarPreparing")
                    .ParentIdExpr("PARENTMENUID")
                    .ItemsExpr("MENUID")
                    .KeyExpr("MENUID")
                    .OnCellPrepared("treeEmpAuthority_OnCellPrepared")
                    .AllowColumnReordering(true)
                    .ColumnAutoWidth(true)
                    .AutoExpandAll(true)
                    .RootValue(null)
                    .Scrolling(s => s.Mode(TreeListScrollingMode.Standard))
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.MENUCODE).Visible(false).SortOrder(SortOrder.Asc);
                        columns.AddFor(m => m.MENUNAME).AllowEditing(false);
                        columns.AddFor(m => m.DISPLAYSEQ).Visible(false).SortOrder(SortOrder.Asc);
                        columns.AddFor(m => m.MEMO);
                        columns.AddFor(m => m.VIEWYN).ShowEditorAlways(false) .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi")
                                .Key("SYSCODE")
                                .LoadAction("AUTHORITYTYPE_LIST")
                            )
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        ).AllowSorting(false);//.HeaderCellTemplate(new JS("treeEmpAuthority_VIEWYN_HeaderCellTemplate"))
                        columns.AddFor(m => m.EDITYN).Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi")
                                .Key("SYSCODE")
                                .LoadAction("AUTHORITYTYPE_LIST")
                            )
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        ).AllowSorting(false); //.HeaderCellTemplate(new JS("treeEmpAuthority_EDITYN_HeaderCellTemplate"))
                        columns.AddFor(m => m.HMIYN).Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi")
                                .Key("SYSCODE")
                                .LoadAction("AUTHORITYTYPE_LIST")
                            )
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        ).AllowSorting(false); //.HeaderCellTemplate(new JS("treeEmpAuthority_HMIYN_HeaderCellTemplate"))
                    })
                    .Editing(e =>
                        e.Mode(GridEditMode.Batch)
                        .AllowUpdating(new JS("iudAuth()"))
                    )
                    .ShowRowLines(true)
                    .ShowBorders(true)
                    .ShowColumnLines(false)
                    .ShowRowLines(true)
                    .ShowColumnHeaders(true)
            )
        </div>
    </div>
</div>

<script type="text/javascript">
    
    var treeLevel = [];

    treeLevel[2] = 'rgba(142,194,194,0.7)';
    treeLevel[3] = 'rgba(142,194,194,0.3)';
    treeLevel[4] = 'rgba(142,194,194,0.1)';
    treeLevel[5] = 'rgba(142,194,194,0.0)';

    function treeEmpAuthority_OnCellPrepared(e) {
        if (e.rowType === "data" && (e.column.dataField === "VIEWYN" ||
                                e.column.dataField === "EDITYN" ||
                                e.column.dataField === "HMIYN")) {

            e.cellElement.css("color", e.data[e.column.dataField] == 1 ? "var(--success)" : "var(--warning)");
            e.cellElement.css("font-weight", e.data[e.column.dataField] == 1 ? "bold" : "normal");
        }
        
        if (e.rowType === "data" && (e.column.dataField === "MENUNAME")) {

            e.cellElement.css("background-color", treeLevel[e.row.level +2]);
        }   
    }

    function grdEmpMaster_OnInitialized(e) {
        userCustomGrid(e);
    }

    function grdEmpMaster_OnCellClick(e) {
        this.selectedValue = e.key;
        e.component.selectRows([e.key], false);

        if (e.rowType == "data") {
            var treelist = $('#treeEmpAuthority').dxTreeList('instance');
            var modify_tree = treelist.element().find(".dx-cell-modified");
                
            window.setTimeout(function() {
                var keys = getNodeKeys(treelist.getRootNode());
                treelist.beginUpdate();
                keys.forEach(function(key) {  
                    treelist.expandRow(key);
                }); 
                treelist.endUpdate();
            }, 500);

            treelist.refresh();
            
            if (modify_tree.length > 0) {
                treelist.cancelEditData();
            }
        }
    }
        
    var getNodeKeys = function(node) {
        var keys = [];
        keys.push(node.key);
        node.children.forEach(function(item) {              
            keys = keys.concat(getNodeKeys(item));
        });            
        return keys;
    }

    //사용자 목록 - 사용자 그룹 수정
    function grdEmpMaster_OnEditorPrepared(e) {
        if (e.parentType == 'dataRow' && e.dataField == 'EMPGRPCODE') {
            e.editorElement.dxSelectBox('instance').option('onValueChanged', function(args) {
                var result = DevExpress.ui.dialog.confirm('@LabelText.AREYOUSURECHANGEGROUP', '@LabelText.EMPGROUPNAME @LabelText.CHANGE');

                result.done(function (dialogResult) {
                    if (dialogResult == true) {
                        e.cancel = false;
                        var grid = $("#grdEmpMaster").dxDataGrid('instance');
                        grid.cellValue(e.row.rowIndex, 'EMPGRPCODE', args.value);
                    }
                    else {
                        e.cancel = true;
                        return false;
                    }
                });
            });
        }
    }

    function treeEmpAuthority_OnBeforeSend(method, ajaxOptions) {
        if (method == "load") {
            var empGrid = $('#grdEmpMaster').dxDataGrid('instance');
            var empCodeRow = empGrid.getSelectedRowsData();
            if (empCodeRow.length > 0) {
                ajaxOptions.data.EMPCODE = empCodeRow[0].EMPCODE;
            } else {
                ajaxOptions.data.EMPCODE = "";
            }
        } else if (method == "update") {
            var empGrid = $('#grdEmpMaster').dxDataGrid('instance');
            var empCodeRow = empGrid.getSelectedRowsData();
            var jsonResult = ajaxOptions.data.values;
            var parseJson = JSON.parse(jsonResult);

            if (empCodeRow.length > 0) {
                parseJson.EMPCODE = empCodeRow[0].EMPCODE;
                ajaxOptions.data.values = JSON.stringify(parseJson);
            } else {
                parseJson.EMPCODE = '';
                ajaxOptions.data.values = JSON.stringify(parseJson);
            }
        }
    }

    function treeEmpAuthority_onRowUpdating(e) {
        for (var property in e.oldData) {
            if (!e.newData.hasOwnProperty(property)) {
                e.newData[property] = e.oldData[property];
            }
        }
    }

    //toolbar checkbox all checked
    function treeEmpAuthority_OnToolbarPreparing(e) {
        e.toolbarOptions.items.unshift(
            {
                location: "after",
                widget: "dxButton",
                options: {
                    hint: "@LabelText.ALLCHECKED",
                    icon: "check",
                    onClick: function (e) {
                        var list = $('#treeEmpAuthority').dxTreeList('instance');
                        var ds = list.getDataSource();
                        var data = list.getVisibleRows();
                        list.beginUpdate();
                        for (var itemIndex = 0; itemIndex < ds._items.length; itemIndex++) {
                            if (data[itemIndex].data.EDITYN == false) {
                                list.cellValue(itemIndex, "VIEWYN", 1)
                                list.cellValue(itemIndex, "EDITYN", 1)
                                list.cellValue(itemIndex, "HMIYN", 1)
                            }
                        }
                        list.endUpdate();
                    }
                }
            });
    }

    //조회유무 전체선택
    function treeEmpAuthority_VIEWYN_HeaderCellTemplate(container, options) {
       $('<div>')
            .appendTo(container)
            .dxCheckBox({
                onValueChanged: function (args) {
                    var list = $('#treeEmpAuthority').dxTreeList('instance');
                    var ds = list.getDataSource();
                    list.beginUpdate();
                    for (var itemIndex = 0; itemIndex < ds._items.length; itemIndex++) {
                        if (args.value == false) {
                            list.cellValue(itemIndex, "EDITYN", args.value == true ? 1: 0)
                        }
                        list.cellValue(itemIndex, "VIEWYN", args.value == true ? 1: 0)
                    }
                    list.endUpdate();
                }
            })
            .on('dxclick', function (e) {
                e.stopPropagation();
            }).text("@LabelText.VIEWYN");
    }

    //수정유무 전체선택
    function treeEmpAuthority_EDITYN_HeaderCellTemplate(container, options) {
        $('<div>')
            .appendTo(container)
            .dxCheckBox({
                onValueChanged: function (args) {
                    var list = $('#treeEmpAuthority').dxTreeList('instance');
                    var ds = list.getDataSource();
                    list.beginUpdate();
                    for (var itemIndex = 0; itemIndex < ds._items.length; itemIndex++) {
                        if (args.value == true) {
                            list.cellValue(itemIndex, "VIEWYN", args.value == true ? 1: 0)
                        }
                        list.cellValue(itemIndex, "EDITYN", args.value == true ? 1: 0)
                    }
                    list.endUpdate();
                }
            })
            .on('dxclick', function (e) {
                e.stopPropagation();
            }).text("@LabelText.EDITYN");
    }

    //현장조회유무 전체선택
    function treeEmpAuthority_HMIYN_HeaderCellTemplate(container, options) {
        $('<div>')
            .appendTo(container)
            .dxCheckBox({
                onValueChanged: function (args) {
                    var list = $('#treeEmpAuthority').dxTreeList('instance');
                    var ds = list.getDataSource();
                    list.beginUpdate();
                    for (var itemIndex = 0; itemIndex < ds._items.length; itemIndex++) {
                        list.cellValue(itemIndex, "HMIYN", args.value == true ? 1: 0)
                    }
                    list.endUpdate();
                }
            })
            .on('dxclick', function (e) {
                e.stopPropagation();
            }).text("@LabelText.HMIYN");
    }

    function treeEmpAuthority_OnCellClick(e) {
        if (e.rowType == "data" && (e.column.dataField == "VIEWYN" || e.column.dataField == "EDITYN" || e.column.dataField == "HMIYN")) {
            var treeList = e.component;

            treeList.beginUpdate();
            /* Check True인 경우 현재 선택된 Node에 상위 노드 모두 Check 해줘야함.*/
            var currentNode = treeList.getNodeByKey(e.key);

            if (currentNode.parent != undefined) {
                currentNode = currentNode.parent;

                while (true) {
                    if (currentNode != undefined) {

                        var isAllUnchecked = true;

                        currentNode.children.forEach(function (o) {
                            var index = treeList.getRowIndexByKey(o.key);

                            if ((treeList.cellValue(index, e.column.dataField) == 1 && e.key != o.key) || (e.value == 0 && e.key == o.key)) {
                                isAllUnchecked = false;
                            }
                        });

                        var index = treeList.getRowIndexByKey(currentNode.key);
                        var setVal;
                        if (isAllUnchecked) {
                            setVal = 0;
                        } else {
                            setVal = 1;
                        }

                        if (treeList.cellValue(index, e.column.dataField) != setVal) {
                            treeList.cellValue(index, e.column.dataField, setVal);
                        }
                            
                        currentNode = currentNode.parent;
                    } else {
                        break;
                    }
                }
            }

            var currentNode = treeList.getNodeByKey(e.key);

            if (currentNode.hasChildren == true && e.column.dataField != "MEMO") {
                /* 하위가 있는 경우 모두 Check True 해줘야함.*/
                treeList.forEachNode(currentNode, function(node) {
                    var index = treeList.getRowIndexByKey(node.key);
                    var setVal = e.value == 0 ? 1 : 0;

                    if (treeList.cellValue(index, e.column.dataField) != setVal) {
                        treeList.cellValue(index, e.column.dataField, setVal);
                    }
                });
            }

            /* 자기 자신 바꾸기*/
            treeList.cellValue(e.rowIndex, e.column.dataField, e.value == 0 ? 1 : 0);
            treeList.endUpdate();
        }
    }
    
</script>