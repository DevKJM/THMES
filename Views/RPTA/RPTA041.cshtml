@using JSMES.WebUI.Alpha.Models.LogStruct.Mapping;
@using JSMES.WebUI.Alpha.Models.MasterStruct
@using JSMES.WebUI.Alpha.ViewModels.RPT.RPTA;
@using JSMES.WebUI.Alpha.App_GlobalResources;


@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 col-sm-12">
            @(Html.DevExtreme().DataGrid<RPTA041_LIST>()
                .ID("grdWorkResult")
                .DataSource(d => d.WebApi().Controller("RPTA041WebApi"))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.PLANTCODE).Visible(false);
                    columns.AddFor(m => m.WORKDATE).Width(180).Format(f => f.Type(Format.ShortDate))
                        .SelectedFilterOperation(FilterOperations.Between)
                        .FilterValue(new object[] { DateTime.Now.AddDays(-7).Date, DateTime.Now.Date })
                        .SortOrder(SortOrder.Desc).SortIndex(0);
                    columns.AddFor(m => m.CARTYPE).Caption(LabelText.CARTYPE).Width(50)
                        .Lookup(lookup => lookup
                        .DataSource(d => d.WebApi()
                        .Controller("COMA003WebApi").Key("SYSCODE")
                        .LoadAction("CARTYPE_LIST"))
                        .DisplayExpr("SYSCODENAME")
                        .ValueExpr("SYSCODE")
                    );
                    columns.AddFor(m => m.COLOR).Caption(LabelText.COLOR).Width(50)
                        .Lookup(lookup => lookup
                        .DataSource(d => d.WebApi()
                        .Controller("COMA003WebApi").Key("SYSCODE")
                        .LoadAction("COLOR_LIST"))
                        .DisplayExpr("SYSCODENAME")
                        .ValueExpr("SYSCODE")
                    );
                    columns.AddFor(m => m.PARTNUMBER)
                        .SortOrder(SortOrder.Asc).SortIndex(1);
                    columns.AddFor(m => m.PRODUCTNAME);
                    columns.AddFor(m => m.PROCESSCODE)
                        .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                        .Controller("COMA001WebApi").Key("PROCESSCODE")
                        .LoadAction("PROCESS_LIST"))
                        .DisplayExpr("PROCESSNAME")
                        .ValueExpr("PROCESSCODE")
                    )
                    .SortOrder(SortOrder.Asc).SortIndex(2);
                    columns.AddFor(m => m.WORKER);
                    columns.AddFor(m => m.WORKSTARTTIME).Format(f => f.Type(Format.ShortDateShortTime));
                    columns.AddFor(m => m.WORKENDTIME).Format(f => f.Type(Format.ShortDateShortTime)).SortOrder(SortOrder.Desc).SortIndex(0);
                    columns.AddFor(m => m.YEONDANQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.ORDERQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.PRODUCTQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.GOODQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.DEFECTQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.STRAIGHTRATE).Format(f => f.Type(Format.FixedPoint).Precision(2));
                    columns.AddFor(m => m.DEFECTRATE).Format(f => f.Type(Format.FixedPoint).Precision(2));
                })
                .RemoteOperations(true)
                .FilterPanel(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .Paging(p => p.PageSize(25).Enabled(true))
                .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] {10, 25, 50, 100, 1000 }))
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Width(180)
                    .Placeholder("Search...")
                )
                .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                    .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .ShowBorders(true)
                .AllowColumnResizing(true)
                .Editing(e =>
                    e.Mode(GridEditMode.Batch)
                    .AllowAdding(false)
                    .AllowUpdating(false)
                    .AllowDeleting(false)
                )
                .RowAlternationEnabled(true)
                .Export(e=>e.Enabled(true))
                .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, '') ;}")
                .ShowRowLines(true)
                .OnInitialized("grdWorkResult_OnInitialized")
                .Option("KEY_FIELD", new object[]
                {
                    "PLANTCODE", "WORKDATE", "PARTNUMBER", "PRODUCTNAME", "SHIFTCODE", "PROCESSCODE",
                    "CREATEDATE", "RECENTDATE", "PRODUCTQUANTITY", "GOODQUANTITY", "DEFECTQUANTITY", "PROGRESSRATE", "DEFECTRATE"
                })
                .Option("IGNORE_AUTOWIDTH", new object[] { "PLANTCODE", "WORKDATE", "SHIFTCODE", "CARTYPE", "COLOR", "PARTNUMBER", "PRODUCTNAME", "PROCESSCODE", "EQUIPMENTCODE", "WORKSTARTTIME", "WORKENDTIME", "PRODUCTQUANTITY", "GOODQUANTITY", "DEFECTQUANTITY", "STRAIGHTRATE", "DEFECTRATE", "WORKER", "YEONDANQUANTITY", "ORDERQUANTITY" })
                //.Option("USE_REQUIRED_HEADER", true)
            )
        </div>
    </div>
</div>
<script>
    function grdWorkResult_OnInitialized(e) {
        userCustomGrid(e);
    }
</script>