@using JSMES.WebUI.Alpha.Models.LogStruct.Mapping;
@using JSMES.WebUI.Alpha.Models.MasterStruct
@using JSMES.WebUI.Alpha.ViewModels.RPT.RPTA;
@using JSMES.WebUI.Alpha.App_GlobalResources;


@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 col-sm-12">
            @(Html.DevExtreme().DataGrid<RPTA047_LIST>()
                .ID("grdShipment")
                .DataSource(d => d.WebApi().Controller("RPTA047WebApi"))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.WORKDATE).Width(180).Format(f => f.Type(Format.ShortDate)).AutoExpandGroup(true)
                        .SelectedFilterOperation(FilterOperations.Between)
                        .FilterValue(new object[] { DateTime.Now.AddDays(-7).Date, DateTime.Now.Date })
                        .SortOrder(SortOrder.Desc).SortIndex(0);
                    columns.AddFor(m => m.VENDORCODE).SortOrder(SortOrder.Asc).SortIndex(1)
                        .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                        .Controller("COMA001WebApi").Key("VENDORCODE")
                        .LoadAction("VENDOR_LIST"))
                        .DisplayExpr("VENDORNAME")
                        .ValueExpr("VENDORCODE")
                    );
                    columns.AddFor(m => m.CARTYPE).Caption(LabelText.CARTYPE).SortOrder(SortOrder.Asc).SortIndex(2)
                        .Lookup(lookup => lookup
                        .DataSource(d => d.WebApi()
                        .Controller("COMA003WebApi").Key("SYSCODE")
                        .LoadAction("CARTYPE_LIST"))
                        .DisplayExpr("SYSCODENAME")
                        .ValueExpr("SYSCODE")
                    );
                    columns.AddFor(m => m.COLOR).Caption(LabelText.COLOR).SortOrder(SortOrder.Asc).SortIndex(3)
                        .Lookup(lookup => lookup
                        .DataSource(d => d.WebApi()
                        .Controller("COMA003WebApi").Key("SYSCODE")
                        .LoadAction("COLOR_LIST"))
                        .DisplayExpr("SYSCODENAME")
                        .ValueExpr("SYSCODE")
                    );
                    columns.AddFor(m => m.PARTNUMBER).Visible(false).SortOrder(SortOrder.Asc).SortIndex(4);
                    columns.AddFor(m => m.PRODUCTNAME);
                    columns.AddFor(m => m.PLANQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.QUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                })
                .MasterDetail(md => {
                    md.Enabled(true);
                    md.Template(@<text>
                            @(Html.DevExtreme().DataGrid<RPTA047B_LIST>()
                                .ColumnAutoWidth(true)
                                .ShowBorders(true)
                                .Columns(columns =>
                                {
                                    columns.AddFor(m => m.LOTNUMBER);
                                    columns.AddFor(m => m.SERIALNUMBER);
                                    columns.AddFor(m => m.QUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                                    columns.AddFor(m => m.WORKER)
                                        .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                            .Controller("COMA001WebApi")
                                            .Key("EMPCODE")
                                            .LoadAction("HR_LIST")
                                            )
                                            .DisplayExpr("EMPNAME")
                                            .ValueExpr("EMPCODE")
                                        );
                                })
                                .DataSource(d => d.WebApi().Controller("RPTA047WebApi")
                                    .LoadAction("getDetail")
                                    .LoadParams(new { WORKDATE = new JS("data.WORKDATE"), VENDORCODE = new JS("data.VENDORCODE"), PARTNUMBER = new JS("data.PARTNUMBER")})
                                )
                            )
                        </text>);
                })
                //.Summary(s => s.GroupItems(sum =>
                //{
                //    sum.AddFor(m => m.QUANTITY)
                //        .SummaryType(SummaryType.Sum)
                //        .Column("QUANTITY")
                //        .ValueFormat(Format.FixedPoint)
                //        .DisplayFormat("{0}")
                //        .ShowInGroupFooter(false)
                //        .AlignByColumn(true);
                //    sum.AddFor(m => m.UNITCODE)
                //        .SummaryType(SummaryType.Max)
                //        .Column("UNITCODE")
                //        .DisplayFormat("{0}")
                //        .ShowInGroupFooter(false)
                //        .AlignByColumn(true);
                //}))
                .RemoteOperations(true)
                .ColumnAutoWidth(true)
                .FilterPanel(f => f.Visible(true))
                .Paging(p => p.PageSize(25).Enabled(true))
                .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Width(180)
                    .Placeholder("Search...")
                )
                .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .ShowBorders(true)
                .AllowColumnResizing(true)
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true))
                .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, '') ;}")
                .ShowRowLines(true)
                .OnInitialized("grdShipment_OnInitialized")
            )
        </div>
    </div>
</div>
<script>
    function grdShipment_OnInitialized(e) {
        userCustomGrid(e);
    }
</script>