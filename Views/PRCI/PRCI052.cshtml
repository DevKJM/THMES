@using JSMES.WebUI.Alpha.ViewModels.PRC.PRCI;
@using JSMES.WebUI.Alpha.ViewModels;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.Models.LogStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @(Html.DevExtreme().DataGrid<PRCI052_LIST>()
                      .ID("grdEmpMaster")
                      .DataSource(d => d.WebApi().Controller("PRCI052WebApi").Key("RESULTSEQUENCE"))
                      .Columns(columns =>
                      {
                          columns.AddFor(m=>m.WORKDATE).GroupIndex(0).AllowEditing(false);
                          columns.AddFor(m=>m.RESULTSEQUENCE).Visible(false);
                          columns.AddFor(m=>m.ORDERNUMBER).AllowEditing(false);
                          columns.AddFor(m=>m.PROCESSCODE).AllowEditing(false)
                           .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                              .Controller("COMA001WebApi").Key("PROCESSCODE")
                                              .LoadAction("PROCESS_LIST"))
                                              .DisplayExpr("PROCESSNAME")
                                              .ValueExpr("PROCESSCODE")
                                          );
                          columns.AddFor(m=>m.PARTNUMBER).AllowEditing(false)
                                .Lookup(lookup => lookup
                                      .DataSource(d => d.WebApi()
                                          .Controller("COMA001WebApi").Key("PARTNUMBER")
                                          .LoadAction("PART_LIST"))
                                      .DisplayExpr("PRODUCTNAME")
                                      .ValueExpr("PARTNUMBER")
                                  );
                          columns.AddFor(m=>m.PRODUCTQUANTITY).AllowEditing(false);
                          columns.AddFor(m=>m.GOODQUANTITY).AllowEditing(false);
                          columns.AddFor(m=>m.DEFECTQUANTITY).AllowEditing(false);
                      })
                      .RemoteOperations(true)
                      .FilterPanel(f => f.Visible(true))
                      .Paging(p => p.PageSize(25).Enabled(true))
                      .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                      .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                  .KeyboardNavigation(options =>
                  {
                      // MoveFocus : 엔터시 이동
                      // startEdit : 엔터시 EditMode 다시 엔터시 이동
                      options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                      // 엔터 이외 키 입력시 EditMode 여부
                      options.EditOnKeyPress(true);
                      // Row : 엔터시 열 단위 이동 →
                      // Column : 엔터시 행 단위 이동 ↓
                      options.EnterKeyDirection(GridEnterKeyDirection.Column);
                  })
                      .SearchPanel(searchPanel => searchPanel
                          .Visible(true)
                          .Width(180)
                          .Placeholder("Search...")
                      )
                      .FilterRow(filterRow => filterRow
                          .Visible(true)
                          .ApplyFilter(GridApplyFilterMode.Auto)
                      )
                      .ShowBorders(true)
                      .AllowColumnResizing(true)
                    .ColumnAutoWidth(true)
                    .ShowRowLines(true)
                    .RowAlternationEnabled(true)
                    .Export(e => e.Enabled(true).ExcelFilterEnabled(true))
                    .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, ''); }")
                    .MasterDetail(md =>
                                {
                                    md.Enabled(true);
                                    md.Template(@<text>
                                     @(Html.DevExtreme().DataGrid<PRCI052A_LIST>()
                                            .ColumnAutoWidth(true)
                                            .Width(500)
                                            .ShowBorders(true)
                                            .ID(new JS("'grdDefect_' + data.ORDERNUMBER"))
                                            .Columns(columns => { 
                                                columns.AddFor(m => m.DEFECTCODE).AllowEditing(false)
                                                  .Lookup(lookup => lookup
                                                      .DataSource(d => d.WebApi()
                                                          .Controller("COMA001WebApi").Key("DEFECTCODE")
                                                          .LoadAction("DEFECT_LIST"))
                                                      .DisplayExpr("DEFECTNAME")
                                                      .ValueExpr("DEFECTCODE")
                                                  );
                                                columns.AddFor(m=>m.DEFECTQUANTITY);
                                            })
                                            .Editing(e => e.AllowUpdating(true).Mode(GridEditMode.Batch))
                                            .DataSource(d => d.WebApi()
                                                .Controller("PRCI052WebApi")
                                                .LoadAction("getDetail")
                                                .Key("DEFECTCODE", "ORDERNUMBER")
                                                .UpdateAction("putDetail")
                                                .LoadParams(new { ORDERNUMBER = new JS("data.ORDERNUMBER") })
                                            )
                                            .FilterPanel(f => f.Visible(true))
                                            .ColumnAutoWidth(true)
                                            .Paging(p => p.PageSize(1000).Enabled(false))
                                            .Selection(s => s.Mode(SelectionMode.Multiple))
                                            .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                            .Export(e => e.Enabled(true))
                                            .ShowRowLines(true)
                                            .Editing(e => e.Mode(GridEditMode.Batch).AllowUpdating(true))
                                            .ShowBorders(true)
                                            .AllowColumnResizing(true)
                                            .RepaintChangesOnly(true)
                                            .ShowRowLines(true)
                                            .RowAlternationEnabled(true)
                                            .Option("MANUAL_UPDATING", true)
                                            .OnContentReady("grdDefect_OnContentReady")
                                            .OnInitialized("function(e){userCustomGrid(e);}")
                                            //.OnToolbarPreparing("grdReceiving_detail_OnToolbarPreparing")
                                    )
                                </text>);
                            })
            )
        </div>
    </div>
</div>

<script>    
        
    function grdDefect_OnContentReady(e){
        if (e.component.option("updating") && !e.component.hasEditData()) {  // updates finished successfully
            e.component.option("updating", false);
            $('#grdEmpMaster').dxDataGrid('instance').refresh();
        }
    }

</script>