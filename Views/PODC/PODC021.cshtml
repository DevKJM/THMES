@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.ViewModels.POD.PODC;
@using JSMES.WebUI.Alpha.App_GlobalResources;


@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @(Html.DevExtreme().DataGrid<PODC001_LIST>()
                    .ID("grdSurveyHis")
                    .DataSource(d => d.WebApi()
                        .Controller("PODC001WebApi")
                        .Key("SERIALNUMBER")
                        .OnBeforeSend("grdSurveyHis_OnBeforeSend")
                    )
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.PLANTCODE).Visible(false);
                        columns.AddFor(m => m.WAREHOUSECODE).Visible(false);
                        columns.AddFor(m => m.SURVEYSEQUENCE).Visible(false);
                        columns.AddFor(m => m.PARTNUMBER);
                        columns.AddFor(m => m.PRODUCTNAME);
                        columns.AddFor(m => m.PRODUCTTYPE)
                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("PRODUCTTYPE_LIST"))
                                .DisplayExpr("SYSCODENAME")
                                .ValueExpr("SYSCODE")
                            );
                        columns.AddFor(m => m.LOTNUMBER);
                        columns.AddFor(m => m.SERIALNUMBER);
                        columns.AddFor(m => m.UNITCODE)
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .Controller("COMA003WebApi").Key("SYSCODE")
                                    .LoadAction("UNITCODE_LIST"))
                                .DisplayExpr("SYSCODENAME")
                                .ValueExpr("SYSCODE")
                            );
                        columns.AddFor(m => m.SAFETYINVENTQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                        columns.AddFor(m => m.QUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                        columns.AddFor(m => m.SURVEYQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0))
                            .SetCellValue("setUserValue");
                        columns.AddFor(m => m.SURVEYDATE).Format(Format.ShortDate).AllowFiltering(false);
                        columns.AddFor(m => m.SURVEYWORKER)
                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                .Controller("COMA001WebApi").Key("EMPCODE")
                                .LoadAction("HR_LIST"))
                                .DisplayExpr("EMPNAME")
                                .ValueExpr("EMPCODE")
                            );
                    })
                    .KeyboardNavigation(options =>
                    {
                        // MoveFocus : 엔터시 이동 
                        // startEdit : 엔터시 EditMode 다시 엔터시 이동
                        options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                        // 엔터 이외 키 입력시 EditMode 여부
                        options.EditOnKeyPress(true);
                        // Row : 엔터시 열 단위 이동 →
                        // Column : 엔터시 행 단위 이동 ↓
                        options.EnterKeyDirection(GridEnterKeyDirection.Column);
                    })
                    .Editing(e =>
                    {
                        e.Mode(GridEditMode.Batch)
                            .AllowUpdating(new JS("iudAuth()"));
                        e.StartEditAction(GridStartEditAction.Click);
                    })
                    .RemoteOperations(true)
                    .FilterPanel(f => f.Visible(true))
                    .ColumnAutoWidth(true)
                    .Paging(p => p.PageSize(25).Enabled(true))
                    .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                    .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                    .SearchPanel(searchPanel => searchPanel
                        .Visible(true)
                        .Width(180)
                        .Placeholder("Search...")
                    )
                    .FilterRow(filterRow => filterRow
                        .Visible(true)
                        .ApplyFilter(GridApplyFilterMode.Auto)
                    )
                    .ShowRowLines(true)
                    .ShowBorders(true)
                    .AllowColumnResizing(true)
                    .RowAlternationEnabled(true)
                    .Export(e => e.Enabled(true).ExcelFilterEnabled(true))
                    .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, '" + "" + "') ;}")
                    .OnInitialized("grdSurveyHis_OnInitialized")
                    .Option("USE_REQUIRED_HEADER", true)
                    .Option("KEY_FIELD", new object[]
                    {
                        "PLANTCODE", "WAREHOUSECODE", "SURVEYSEQUENCE", "PARTNUMBER", "PRODUCTNAME",
                        "PRODUCTTYPE", "LOTNUMBER", "SERIALNUMBER", "UNITCODE", "SAFETYINVENTQUANTITY",
                        "QUANTITY", "SURVEYDATE", "SURVEYWORKER"
                    })
            )
        </div>
    </div>
</div>

<script>
    function grdSurveyHis_OnInitialized(e) {
        userCustomGrid(e);
    }

    function setUserValue(rowData, value) {
        rowData.SURVEYQUANTITY = value;
        rowData.SURVEYWORKER = '@User.Identity.Name';
    }

    function grdSurveyHis_OnBeforeSend(method, ajaxOptions) {
        if (method == "update") {

            var jsonResult = ajaxOptions.data.values;
            var parseJson = JSON.parse(jsonResult);

            var SurveyHis_index = $('#grdSurveyHis').dxDataGrid('instance').getRowIndexByKey(ajaxOptions.data.key);
            var surveyseq = $('#grdSurveyHis').dxDataGrid('instance').cellValue(SurveyHis_index, 'SURVEYSEQUENCE');

            if (surveyseq != null) {
                parseJson.SURVEYSEQUENCE = surveyseq;
            } else {
                parseJson.SURVEYSEQUENCE = 0;
            }

            ajaxOptions.data.values = JSON.stringify(parseJson);
        }
    }

    function grdSurveyHis_OnKeyDown(e) {
        if (e && e.jQueryEvent && e.jQueryEvent.key === "Enter") {
            e.jQueryEvent.stopPropagation();
            e.jQueryEvent.preventDefault();
            e.component.instance().editCell(++this.count, 2);
        }
    }

</script>