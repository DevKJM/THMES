@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.ViewModels.POD.PODC;
@using JSMES.WebUI.Alpha.App_GlobalResources;


@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @(Html.DevExtreme().DataGrid<PODC041_LIST>()
                .ID("grdSurveyHis")
                .DataSource(d => d.WebApi()
                    .Controller("PODC041WebApi")
                    .Key("SERIALNUMBER")
                    .OnBeforeSend("grdSurveyHis_OnBeforeSend")
                )
                .Columns(columns =>
                {
                    columns.AddFor(m => m.PLANTCODE).Visible(false);
                    columns.AddFor(m => m.WAREHOUSECODE).Visible(false);
                    columns.AddFor(m => m.SURVEYSEQUENCE).Visible(false);
                    columns.AddFor(m => m.CARTYPE).SortOrder(SortOrder.Asc).SortIndex(0).GroupIndex(0);
                    columns.AddFor(m => m.COLOR).SortOrder(SortOrder.Asc).SortIndex(1).GroupIndex(1);
                    columns.AddFor(m => m.PARTNUMBER);
                    columns.AddFor(m => m.PRODUCTNAME);
                    columns.AddFor(m => m.PRODUCTTYPE)
                        .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                            .Controller("COMA003WebApi").Key("SYSCODE")
                            .LoadAction("PRODUCTTYPE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.LOTNUMBER).SortOrder(SortOrder.Asc).SortIndex(2);
                    columns.AddFor(m => m.SERIALNUMBER).SortOrder(SortOrder.Asc).SortIndex(3);
                    columns.AddFor(m => m.SAFETYINVENTQUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.QUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0));
                    columns.AddFor(m => m.UNITCODE)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("UNITCODE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.VALUE).Format(f => f.Type(Format.FixedPoint).Precision(0))
                        //.CssClass("ColumnsAutomatic")
                        .SetCellValue("setUserValue");
                    columns.AddFor(m => m.SURVEYDATE).Format(f => f.Type(Format.ShortDate)).AllowFiltering(false);
                    columns.AddFor(m => m.SURVEYWORKER)
                        .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                            .Controller("COMA001WebApi").Key("EMPCODE")
                            .LoadAction("HR_LIST"))
                            .DisplayExpr("EMPNAME")
                            .ValueExpr("EMPCODE")
                        );
                })
                .KeyboardNavigation(options =>
                {
                // MoveFocus : 엔터시 이동
                // startEdit : 엔터시 EditMode 다시 엔터시 이동
                options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                // 엔터 이외 키 입력시 EditMode 여부
                options.EditOnKeyPress(true);
                // Row : 엔터시 열 단위 이동 →
                // Column : 엔터시 행 단위 이동 ↓
                options.EnterKeyDirection(GridEnterKeyDirection.Column);
                })
                //.StateStoring(s => s.Enabled(true).StorageKey("MATC021_grdSurveyHis").Type(StateStoringType.LocalStorage))
                .RemoteOperations(true)
                .FilterPanel(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .Paging(p => p.PageSize(25).Enabled(true))
                .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Width(180)
                    .Placeholder("Search...")
                )
                .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .ShowBorders(true)
                .AllowColumnResizing(true)
                .Editing(e =>
                {
                    e.Mode(GridEditMode.Batch)
                        .AllowUpdating(new JS("iudAuth()"));
                    e.StartEditAction(GridStartEditAction.Click);
                })
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true))
                .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, '') ;}")
                .ShowRowLines(true)
                .OnInitialized("grdSurveyHis_OnInitialized")
                //.OnKeyDown("grdSurveyHis_OnKeyDown")
                //.OnEditorPrepared("grdSurveyHis_OnEditorPrepared")
                .Option("KEY_FIELD", new object[]
                {
                "PLANTCODE", "WAREHOUSECODE", "SURVEYSEQUENCE", "CARTYPE", "COLOR", "PARTNUMBER", "PRODUCTNAME",
                "PRODUCTTYPE", "LOTNUMBER", "SERIALNUMBER", "UNITCODE", "SAFETYINVENTQUANTITY",
                "QUANTITY", "SURVEYDATE", "SURVEYWORKER"
                })
                .Option("USE_REQUIRED_HEADER", true)
                .Option("IGNORE_AUTOWIDTH", new object[] { "PLANTCODE", "WAREHOUSECODE", "SURVEYSEQUENCE", "CARTYPE", "COLOR", "PARTNUMBER", "PRODUCTNAME", 
                "PRODUCTTYPE", "LOTNUMBER", "SERIALNUMBER", "UNITCODE", "SAFETYINVENTQUANTITY",
                "QUANTITY", "SURVEYDATE", "SURVEYWORKER" })
            )
        </div>
    </div>
</div>

<script>

    var scanSerialnumberList = "";
    var serialArray = [];
    var filter = [];

    function grdSurveyHis_OnKeyDown(e) {
        if (e && e.jQueryEvent && e.jQueryEvent.key === "Enter") {
            e.jQueryEvent.stopPropagation();
            e.jQueryEvent.preventDefault();
            e.component.instance().editCell(++this.count, 2);
        }
    }
    function grdSurveyHis_OnEditorPrepared(args) {
    }
    function grdSurveyHis_OnInitialized(e) {
        userCustomGrid(e);
    }

    function setUserValue(rowData, value) {
        var nowDate = new Date();
        rowData.VALUE = value;
        rowData.SURVEYDATE = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate());
        rowData.SURVEYWORKER = '@User.Identity.Name';
    }

    function grdSurveyHis_OnBeforeSend(method, ajaxOptions) {
        if (method == "update") {

            var jsonResult = ajaxOptions.data.values;
            var parseJson = JSON.parse(jsonResult);

            var index = $('#grdSurveyHis').dxDataGrid('instance').getRowIndexByKey(ajaxOptions.data.key);
            var surveyseq = $('#grdSurveyHis').dxDataGrid('instance').cellValue(index, 'SURVEYSEQUENCE');
            var unitcode = $('#grdSurveyHis').dxDataGrid('instance').cellValue(index, 'UNITCODE');
            ajaxOptions.data.UNITCODE = unitcode;
            //var surveyqty = $('#grdSurveyHis').dxDataGrid('instance').cellValue(index, 'VALUE');

            if (surveyseq != null) {
                parseJson.SURVEYSEQUENCE = surveyseq;
            } else {
                parseJson.SURVEYSEQUENCE = 0;
            }

            ajaxOptions.data.values = JSON.stringify(parseJson);
        }
    }



    function SetLabelText(e) {
        ProcessBarcodescan(e);
    }

    function ProcessBarcodescan(e) {
        scanSerialnumberList += e + ',';
        DevExpress.ui.notify(scanSerialnumberList, 'error', globalNotificationErrorTime);
        //var count = scanSerialnumberList.split(',').length - 1;
        var count = ((scanSerialnumberList.split(',').length - 1) * 2);

        $('#grdSurveyHis').dxDataGrid('instance').clearFilter();
        var serialIndex = 0;
        //serialArray = scanSerialnumberList.split(',');
        //투입 및 투입 대기 등록한 항목 Filter 추가
        for (var i = 0; i < count; i + 2) {
            var serial = scanSerialnumberList.split(',')[serialIndex];
            filter[i] = ['SERIALNUMBER', 'contains', serial];
            filter[i + 1] = 'or';
            serialIndex++;
        }

        $('#grdSurveyHis').dxDataGrid('instance').option('filterValue', filter);

        ////투입 및 투입 대기 등록한 항목 Filter 추가
        //for (var i = 0; i < count; i++) {
        //    var serial = scanSerialnumberList.split(',')[i];
        //    filter[i] = ['SERIALNUMBER', 'contains', serial];
        //}

        //if (filter.length > 0)
        //    DevExpress.ui.notify(filter, 'error', globalNotificationErrorTime);
        //    $('#grdSurveyHis').dxDataGrid('instance').filter(filter);
    }

</script>