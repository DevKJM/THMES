@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @(Html.DevExtreme().DataGrid<MaterialMaster>()
                .DataSource(d => d.WebApi().Controller("MSTD042WebApi").Key("MATERIALID"))
                .ID("grdMaterial")
                .Columns(columns =>
                {
                    columns.AddFor(m => m.UDCF1).Caption(LabelText.CARTYPE)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("CARTYPE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.COLOR)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("COLOR_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        ); 
                    columns.AddFor(m => m.MATERIALID).Visible(false);
                    columns.AddFor(m => m.MATERIALCODE);
                    columns.AddFor(m => m.MATERIALTYPE)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("MATERIALTYPE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.MATERIALNAME);
                    columns.AddFor(m => m.SPEC1);
                    columns.AddFor(m => m.SPEC2);
                    columns.AddFor(m => m.SPEC3);
                    columns.AddFor(m => m.TEXTURE);
                    columns.AddFor(m => m.SAFETYINVENTQUANTITY);
                    columns.AddFor(m => m.BOXPERQUANTITY);
                    columns.AddFor(m => m.UNITCODE)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("UNITCODE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.MEMO);
                    columns.AddFor(m => m.USEYN);
                    columns.AddFor(m => m.CREATEUSER);
                    columns.AddFor(m => m.CREATEDATE).Format(f => f.Type(Format.ShortDateShortTime));
                    columns.AddFor(m => m.RECENTUSER);
                    columns.AddFor(m => m.RECENTDATE).Format(f => f.Type(Format.ShortDateShortTime));
                })
                .AllowColumnResizing(true)
                .RemoteOperations(true)
                .FilterPanel(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .Paging(p => p.PageSize(25).Enabled(true))
                .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .ShowRowLines(true)
                .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Width(180)
                    .Placeholder("Search...")
                )
                .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .ShowBorders(true)
                .AllowColumnResizing(true)
                .Editing(e =>
                    e.Mode(GridEditMode.Batch)
                        .AllowUpdating(new JS("iudAuth()"))
                        .AllowAdding(new JS("iudAuth()"))
                        .AllowDeleting(new JS("iudAuth()"))
                )
                .KeyboardNavigation(options =>
                {
                    // MoveFocus : 엔터시 이동 
                    // startEdit : 엔터시 EditMode 다시 엔터시 이동
                    options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                    // 엔터 이외 키 입력시 EditMode 여부
                    options.EditOnKeyPress(true);
                    // Row : 엔터시 열 단위 이동 →
                    // Column : 엔터시 행 단위 이동 ↓
                    options.EnterKeyDirection(GridEnterKeyDirection.Column);
                })
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true).ExcelFilterEnabled(true))
                .OnInitialized("grdMaterial_OnInitialized")
                .Option("KEY_FIELD", new object[] { "MATERIALCODE" })
                .Option("INIT_FIELD", new object[] { "USEYN", "MATERIALCODE" })
                .Option("IGNORE_AUTOWIDTH", new object[] { "MATERIALNAME", "SPEC1", "SPEC2", "SPEC3" })
                .OnInitNewRow("grdMaterial_OnInitNewRow")
                .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, '" + "" + "') ;}")
            )
        </div>
    </div>
</div>

<script>
    function grdMaterial_OnInitialized(e) {
        userCustomGrid(e);
    }

    function grdMaterial_OnInitNewRow(e) {
        e.data.SAFETYINVENTQUANTITY = 0;
    }

</script>


@Html.Partial("_DropdownPartial")