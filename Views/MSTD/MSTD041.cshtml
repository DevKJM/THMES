@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;

@{
    ViewBag.Title = "Main";
}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            @(Html.DevExtreme().DataGrid<PartNumberMaster>()
                .DataSource(d => d.WebApi().Controller("MSTD041WebApi").Key("PARTNUMBERID"))
                .ID("grdPartNumber")
                .Columns(columns =>
                {
                    columns.AddFor(m => m.UDCF1).Caption(LabelText.CARTYPE).Width(50)
                    .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("CARTYPE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.UDCF2).Caption(LabelText.COLOR).Width(50)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("COLOR_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        ); 
                    columns.AddFor(m => m.PARTNUMBER);
                    columns.AddFor(m => m.PRODUCTNAME);
                    columns.AddFor(m => m.UDCF4).Caption(LabelText.PRODUCTNAMEPRINT);
                    columns.AddFor(m => m.PRODUCTGROUP)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("PRODUCTGROUP_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.PRODUCTTYPE)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA001WebApi").Key("SYSCODE")
                                .LoadAction("PRODUCTTYPE_HP_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.UDCF3).Caption(LabelText.MATERIALCODE)
                        .Lookup(l => l.DataSource(d => d.WebApi()
                                .Controller("MSTD041WebApi")
                                .LoadAction("getMaterial")
                                .Key("MATERIALCODE")
                            )
                            .ValueExpr("MATERIALCODE")
                            .DisplayExpr("SPEC1")
                        )
                        .EditCellTemplate(new TemplateName("EmbeddedMATERIAL"));
                    columns.AddFor(m => m.DRAWINGNO).Width(50);
                    columns.AddFor(m => m.SPEC).Width(50);
                    columns.AddFor(m => m.SAFETYINVENTQUANTITY);
                    columns.AddFor(m => m.BOXPERQUANTITY);
                    columns.AddFor(m => m.UNITCODE)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.WebApi()
                                .Controller("COMA003WebApi").Key("SYSCODE")
                                .LoadAction("UNITCODE_LIST"))
                            .DisplayExpr("SYSCODENAME")
                            .ValueExpr("SYSCODE")
                        );
                    columns.AddFor(m => m.CUSTOMER)
                        .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                        .Controller("COMA001WebApi").Key("VENDORCODE")
                        .LoadAction("VENDOR_SELLYN_LIST"))
                    .DisplayExpr("VENDORNAME")
                    .ValueExpr("VENDORCODE"));
                    columns.AddFor(m => m.CUSTOMERPARTNUMBER);
                    columns.AddFor(m => m.MEMO).Width(80);
                    columns.AddFor(m => m.USEYN);
                    columns.AddFor(m => m.CREATEUSER);
                    columns.AddFor(m => m.CREATEDATE).Format(f => f.Type(Format.ShortDateShortTime));
                    columns.AddFor(m => m.RECENTUSER);
                    columns.AddFor(m => m.RECENTDATE).Format(f => f.Type(Format.ShortDateShortTime));
                })
                .AllowColumnResizing(true)
                .RemoteOperations(true)
                .FilterPanel(f => f.Visible(true))
                .ColumnAutoWidth(true)
                .Paging(p => p.PageSize(25).Enabled(true))
                .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .ShowRowLines(true)
                  .KeyboardNavigation(options =>
                  {
                      // MoveFocus : 엔터시 이동
                      // startEdit : 엔터시 EditMode 다시 엔터시 이동
                      options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                      // 엔터 이외 키 입력시 EditMode 여부
                      options.EditOnKeyPress(true);
                      // Row : 엔터시 열 단위 이동 →
                      // Column : 엔터시 행 단위 이동 ↓
                      options.EnterKeyDirection(GridEnterKeyDirection.Column);
                  })
                .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Width(180)
                    .Placeholder("Search...")
                )
                .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .ShowBorders(true)
                .AllowColumnResizing(true)
                .Editing(e =>
                    e.Mode(GridEditMode.Batch)
                        .AllowUpdating(new JS("iudAuth()"))
                        .AllowAdding(new JS("iudAuth()"))
                        .AllowDeleting(new JS("iudAuth()"))
                )
                .KeyboardNavigation(options =>
                {
                    // MoveFocus : 엔터시 이동
                    // startEdit : 엔터시 EditMode 다시 엔터시 이동
                    options.EnterKeyAction(GridEnterKeyAction.MoveFocus);
                    // 엔터 이외 키 입력시 EditMode 여부
                    options.EditOnKeyPress(true);
                    // Row : 엔터시 열 단위 이동 →
                    // Column : 엔터시 행 단위 이동 ↓
                    options.EnterKeyDirection(GridEnterKeyDirection.Column);
                })
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true).ExcelFilterEnabled(true))
                .OnFileSaving("function(e) {e.fileName = getExportFileName(this, fullScreenName, '" + "" + "') ;}")
                .OnInitialized("grdPartNumber_OnInitialized")
                .Option("KEY_FIELD", new object[] { "PARTNUMBER" })
                .Option("INIT_FIELD", new object[] { "USEYN", "PARTNUMBER" })
                .Option("IGNORE_AUTOWIDTH", new object[] { "MATERIALCODE", "DRAWINGNO", "SPEC" })
                .OnInitNewRow("grdPartNumber_OnInitNewRow")
                .OnCellClick(@<text>
                    function(e){
                        console.log(e);
                        cartype = e.values[0];
                        color = e.values[1];
                        console.log(cartype);
                        console.log(color);
                    }
                </text>)
            )
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("EmbeddedMATERIAL"))
{
    @(Html.DevExtreme().DropDownBox()
        .ID("ddbMaterial")
        .Value(new JS("data.UDCF3"))
        .ValueExpr("MATERIALCODE")
        .DisplayExpr("SPEC1")
        .DropDownOptions(o=>o.Width(450))
        .DataSource(d => d.WebApi().Controller("MSTD041WebApi").LoadAction("getMaterial").Key("MATERIALCODE")
        .LoadParams(new
        {
            CARTYPE = new JS("data.UDCF1"),
            COLOR = new JS("data.UDCF2")
        })
        )
        .AcceptCustomValue(true)
        .OnValueChanged(@<text>
            function(e){
                console.log(e.value[0]);
                setValue(e.value[0]);
                if(value.PARTNUMBER != currentRowData.PARTNUMBER) {
                    $('#grdPartNumber').dxDataGrid('instance').closeEditCell();
                }
            }
        </text>)
        .ContentTemplate(new TemplateName("EmbeddedPartDataGridSingle"))
    )
}

@*자재 매칭*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedPartDataGridSingle"))
{
    @(Html.DevExtreme().DataGrid<MaterialMaster>()
        .ID("embedded-part-datagrid")
        .DataSource(new JS(@"component.option(""dataSource"")"))
        .Columns(columns =>
        {
            columns.AddFor(m => m.MATERIALCODE);
            columns.AddFor(m => m.MATERIALNAME);
            columns.AddFor(m => m.UDCF1);
            columns.AddFor(m => m.COLOR);
            columns.AddFor(m => m.SPEC1);
        })
        .ColumnAutoWidth(true)
        .HoverStateEnabled(true)
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Height(345)
        .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true).Mode(GridScrollingMode.Infinite))
        .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
        .SelectedRowKeys(new JS(@"component.option(""value"")"))
        .OnCellPrepared("grdPartNumber_OnCellPrepared")
        .OnSelectionChanged(@<text>
            function(selectedItems) {
                var keys = selectedItems.selectedRowKeys;
                component.option("value", keys);
            }
        </text>)
    )
}

<script>
    function grdPartNumber_OnInitialized(e) {
        userCustomGrid(e);
    }

    function grdPartNumber_OnCellPrepared(e) {
        userCustomCellPrepared(e);
    }

    function grdPartNumber_OnInitNewRow(e) {
        e.data.SAFETYINVENTQUANTITY = 0;
        e.data.BOXPERQUANTITY = 0;
        e.data.PARTNUMBERPHOTO = new DevExpress.data.Guid().toString();
    }

</script>


@Html.Partial("_DropdownPartial")