@using JSMES.WebUI.Alpha.App_GlobalResources
@using JSMES.WebUI.Alpha.Models.MasterStruct;

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            @(Html.DevExtreme().DataGrid<LangMaster>()
                      .DataSource(d => d.WebApi().Controller("MSTZ001WebApi").Key("LANGID"))
                      .ID("grdLangMaster")
                      .Columns(columns =>
                      {
                          columns.AddFor(m => m.LANGID).Visible(false);
                          columns.AddFor(m => m.KOKR);
                          columns.AddFor(m => m.ENUS);
                          columns.AddFor(m => m.DEDE);
                          columns.AddFor(m => m.ZHCN);
                          columns.AddFor(m => m.JAJP);
                          columns.AddFor(m => m.KOKRS);
                          columns.AddFor(m => m.ENUSS);
                          columns.AddFor(m => m.DEDES);
                          columns.AddFor(m => m.ZHCNS);
                          columns.AddFor(m => m.JAJPS);
                      })
                      .RemoteOperations(true)
                      .FilterPanel(f => f.Visible(true))
                      .ColumnAutoWidth(true)
                      .Paging(p => p.PageSize(25).Enabled(true))
                      .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                      .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                      .SearchPanel(searchPanel => searchPanel
                          .Visible(true)
                          .Width(180)
                          .Placeholder("Search...")
                      )
                      .FilterRow(filterRow => filterRow
                          .Visible(true)
                          .ApplyFilter(GridApplyFilterMode.Auto)
                      )
                      .ShowBorders(true)
                      .AllowColumnResizing(true)
                      .Editing(e =>
                          e.Mode(GridEditMode.Batch)
                              .AllowUpdating(new JS("iudAuth()"))
                              .AllowAdding(new JS("iudAuth()"))
                              .AllowDeleting(new JS("iudAuth()"))
                      )
                      .RowAlternationEnabled(true)
                      .Export(e => e.Enabled(true).ExcelFilterEnabled(true).AllowExportSelectedData(true))
                      .OnInitialized("grdLangMaster_OnInitialized")
                      .OnToolbarPreparing("grdMSTA001A_OnToolbarPreparing")
            )
        </div>
    </div>
</div>

@*엑셀 업로드*@
@(Html.DevExtreme().Popup()
                              .ID("ExcelUpload_POPUP")
                              .ElementAttr("class", "popup")
                              .ShowTitle(true)
                              .DragEnabled(false)
                              .ContentTemplate(new TemplateName("EmbeddedMSTZ001"))
                              .FullScreen(false)
                              .ShowCloseButton(true)
                              .OnHidden("ExcelUpload_POPUP_OnHidden")
)

@using (Html.DevExtreme().NamedTemplate("EmbeddedMSTZ001"))
{
    //엑셀 업로드 팝업
    @(Html.DevExtreme().FileUploader()
                                                          .ID("ExcelFileUploader")
                                                          .Name("myFile")
                                                          .Multiple(false)
                                                          .Accept("*")
                                                          .UploadMode(FileUploadMode.Instantly)
                                                          .UploadUrl(Url.Action("Upload", "LangMasterExcelUpload"))
                                                          .OnValueChanged("fileUploader_valueChanged")
                                                          .OnUploaded("grdExcelUpload_onUploaded")
                                                            .OnInitialized("grdExcelUpload_onInitialized")
    )

    @*<h3>※ KOKR 칼럼값이 중복이면 자동 업데이트 됩니다.</h3>*@

    @(Html.DevExtreme().DataGrid<LangMaster>()
                                .ID("grdExcelUpload")
                                .DataSource(d => d.WebApi().Controller("MSTZ001WebApi").Key("LANGID").LoadAction("getExcelUpload"))
                                //.OnContentReady("onContentReady")
                                //.OnEditorPreparing("onEditorPreparing")
                                //.OnEditingStart("onEditingStart")
                                //.OnInitialized("grdExcelUpload_OnInitialized")
                                //.OnCellPrepared("grdExcelUpload_OnCellPrepared")
                                .Columns(columns =>
                                {
                                    columns.AddFor(m => m.LANGID).Visible(false);
                                    columns.AddFor(m => m.KOKR);
                                    columns.AddFor(m => m.ENUS);
                                    columns.AddFor(m => m.DEDE);
                                    columns.AddFor(m => m.ZHCN);
                                    columns.AddFor(m => m.JAJP);
                                    columns.AddFor(m => m.KOKRS);
                                    columns.AddFor(m => m.ENUSS);
                                    columns.AddFor(m => m.DEDES);
                                    columns.AddFor(m => m.ZHCNS);
                                    columns.AddFor(m => m.JAJPS);
                                })
                                .HeaderFilter(h => h.Visible(false))
                                .ColumnHidingEnabled(true)
                                .SearchPanel(s => s.Visible(true))
                                .ColumnResizingMode(ColumnResizingMode.Widget)
                                .AllowColumnResizing(true)
                                .RowAlternationEnabled(true)
                                .FilterRow(f => f.Visible(true))
                                .ShowBorders(false)
                                .ShowColumnLines(true)
                                .ShowRowLines(true)
                                .ColumnAutoWidth(true)
                                .AllowColumnReordering(true)
                                .Paging(paging => paging.PageSize(50))
                                .Height(300)
                                .Pager(pager =>
                                {
                                    pager.ShowPageSizeSelector(true);
                                    pager.AllowedPageSizes(new List<int> { 50, 100, 200 });
                                })

                                .Editing(e =>
                                    e.Mode(GridEditMode.Batch)
                                        .AllowUpdating(new JS("iudAuth()"))
                                        .AllowAdding(new JS("iudAuth()"))
                                )
                                .Option("USE_RESIZE", false)
                                .OnToolbarPreparing("grdExcelUpload_OnToolbarPreparing")
                                .OnRowUpdating("grdExcelUpload_onRowUpdating")
                                .OnRowInserting("grdExcelUpload_onRowInserting")
                                .OnRowRemoving("grdExcelUpload_onRowRemoving")
                                .OnContentReady("grdExcelUpload_onContentReady")
    )
}

<script>
    function grdLangMaster_OnInitialized(e) {
        userCustomGrid(e);
    }

    function grdExcelUpload_onInitialized(e) {
        $('#ExcelFileUploader').dxFileUploader('instance').reset();
    }

    function ExcelUpload_POPUP_OnHidden(e) {
        $('#ExcelFileUploader').dxFileUploader('instance').reset();

        $('#grdExcelUpload').dxDataGrid('instance').option('dataSource', null);
        $('#grdExcelUpload').dxDataGrid('instance').refresh();

        var gridGapTemp = $(window).height() -
            ($(window).height() - Number($('#grdExcelUpload').parent().parent().height() +
            $('#grdExcelUpload').parent().parent().offset().top)) -
            $('#grdExcelUpload').offset().top - 10;

        $('#grdExcelUpload').dxDataGrid('instance').option('height', gridGapTemp);
    }

    function fileUploader_valueChanged(e) {
        var files = e.value;
        if (files.length > 0) {
            $("#selected-files").show();
        }
        else
            $("#selected-files").hide();
    }

    function grdExcelUpload_onUploaded(e) {

        $('#grdExcelUpload').dxDataGrid('instance').cancelEditData();
        $('#grdExcelUpload').dxDataGrid('instance').refresh();

        $("#grdExcelUpload").dxDataGrid({
            dataSource: DevExpress.data.AspNet.createStore({
                key: "LANGID",
                loadUrl: '@Url.Action("getExcelUpload", "MSTZ001WebApi", new { httproute = "DefaultApi" })',
                insertUrl: '@Url.Action("post", "MSTZ001WebApi", new { httproute = "DefaultApi" })',
                updateUrl: '@Url.Action("put", "MSTZ001WebApi", new { httproute = "DefaultApi" })',
                deleteUrl: '@Url.Action("delete", "MSTZ001WebApi", new { httproute = "DefaultApi" })',
            })
        });

        var jsonLocation = "/Content/Files/" + e.file.name + ".json";

        $.getJSON(jsonLocation, function(data){
            for (var i = 0; i < data.length; i++) {
                $('#grdExcelUpload').dxDataGrid('instance').addRow();

                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'KOKR', data[i].KOKR);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'ENUS', data[i].ENUS);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'DEDE', data[i].DEDE);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'ZHCN', data[i].ZHCN);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'JAJP', data[i].JAJP);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'KOKRS', data[i].KOKRS);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'ENUSS', data[i].ENUSS);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'DEDES', data[i].DEDES);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'ZHCNS', data[i].ZHCNS);
                $('#grdExcelUpload').dxDataGrid('instance').cellValue(0, 'JAJPS', data[i].JAJPS);
            }
        });

        var gridGapTemp = $(window).height() -
            ($(window).height() - Number($('#grdExcelUpload').parent().parent().height() +
            $('#grdExcelUpload').parent().parent().offset().top)) -
            $('#grdExcelUpload').offset().top - 10;

        $('#grdExcelUpload').dxDataGrid('instance').option('height', gridGapTemp);

        $('#ExcelFileUploader').dxFileUploader('instance').reset();
    }

    function grdMSTA001A_OnToolbarPreparing(e) {
        var dataGrid = e.component;

        e.toolbarOptions.items.unshift(
            {
                //UPLOAD
                location: "after",
                widget: "dxButton",
                options: {
                    icon: "glyphicon glyphicon-open",
                    onClick: function () {
                        $("#ExcelUpload_POPUP").dxPopup("instance").show();
                    }
                }
            });
    }

    function grdExcelUpload_OnToolbarPreparing(e) {
        //var dataGrid = e.component;

        //loadData(dataGrid);

        //e.toolbarOptions.items.unshift(
        //    {
        //        location: "after",
        //        widget: "dxButton",
        //        options: {
        //            icon: "search",
        //            onClick: function () {



        //                loadData(dataGrid);
        //            }
        //        }
        //    });
    }

    function loadData(dataGrid) {
        var queryResult = {
            store: DevExpress.data.AspNet.createStore({
                key: "LANGID",
                loadUrl: '@Url.Action("getExcelUpload", "MSTZ001WebApi", new { httproute = "DefaultApi" })'
            })
        }

        dataGrid.cancelEditData();
        dataGrid.option('dataSource', queryResult);
        $('#grdExcelUpload').dxDataGrid('instance').refresh();
    }

    var updating = false;

    function grdExcelUpload_onRowUpdating(e) {
        if(!updating)
            updating = true;
    }

    function grdExcelUpload_onRowInserting(e) {
        if(!updating)
            updating = true;
    }

    function grdExcelUpload_onRowRemoving(e) {
        if(!updating)
            updating = true;
    }

    function grdExcelUpload_onContentReady(e) {
        if(updating && !e.component.hasEditData()){  // updates finished successfully
            //console.log("onContentReady");
            updating = false;
            DevExpress.ui.notify('@LabelText.JOBSUCCESS', "success", globalNotificationSuccessTime);
            $("#ExcelUpload_POPUP").dxPopup("instance").hide();
        }
    }


</script>


@Html.Partial("_DropdownPartial")


