@using System.Web.UI.WebControls
@using JSMES.WebUI.Alpha.ViewModels.POD.PODB;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.Models.LogStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;
@using ButtonType = DevExtreme.AspNet.Mvc.ButtonType

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-4 col-sm-12">
            <h4><span class="dx-fieldset-header"><i class="fa fa-angle-right">@LabelText.PRODUCT @LabelText.RELEASE @LabelText.INSERTION</i></span></h4>
            @(Html.DevExtreme().Form<PODB001_LIST>
                          ()
                          .ID("form")
                          .ColCount(2)
                          .Items(items =>
                          {
                              items.AddSimpleFor(m => m.VENDORCODE)
                                  .Editor(e => e
                                      //.RadioGroup()
                                      .DropDownBox()
                                      .DataSource(d => d.WebApi().Key("VENDORCODE").Controller("COMA001WebApi").LoadAction("VENDOR_SELLYN_LIST"))
                                      .DisplayExpr("VENDORNAME")
                                      .ValueExpr("VENDORCODE")
                                      .ContentTemplate(new TemplateName("EmbeddedPODB001_Vendor"))
                                      .Placeholder("Select a value...")
                                      .OnValueChanged("form_OnValueChanged")
                                  )
                                  .ColSpan(2);

                              items.AddSimpleFor(m => m.WORKDATE)
                                  .Editor(e => e
                                      .DateBox()
                                      .Value(DateTime.Today)
                                      .Type(DateBoxType.Date)
                                      .ReadOnly(true)
                                  ).ColSpan(2);

                              items.AddSimpleFor(m => m.DELIVERYQUANTITY)
                                  .Editor(e => e
                                      .NumberBox()
                                      //.ShowSpinButtons(true)
                                      .Format(f => f.Type(Format.FixedPoint).Precision(0))
                                      .ReadOnly(true)
                                  //.OnValueChanged("orderquantity_OnValueChanged")
                                  //.ID("QTY")
                                  )
                                  //.ValidationRules(r => r
                                  //    .AddRequired()
                                  //    .Message("OrderQuantity is required"))
                                  .ColSpan(2);
                              items.AddSimpleFor(m => m.MEMO)
                                  .Editor(e => e
                                      .TextArea()
                                      .StylingMode(EditorStylingMode.Outlined)
                                      .Height(90)
                                      .OnValueChanged("form_OnValueChanged")
                                  ).ColSpan(2);


                              items.AddButton()
                                  .ButtonOptions(b => b.ID("btnSave")
                                      .Icon("check")
                                      .Text(LabelText.INSERTION)
                                      .Type(ButtonType.Success)
                                      .StylingMode(ButtonStylingMode.Contained)
                                      .OnClick("btnSave_OnClick")
                                      .Width("100%")
                                      .FocusStateEnabled(false)
                                      .HoverStateEnabled(true)
                                      .Disabled(new JS("!iudAuth()"))
                                  ).ColSpan(1);

                              items.AddButton()
                                  .ButtonOptions(b => b.ID("btnClear")
                                      .Icon("refresh")
                                      .Text(LabelText.REMOVE)
                                      .Type(ButtonType.Default)
                                      .StylingMode(ButtonStylingMode.Contained)
                                      .OnClick("btnClear_OnClick")
                                      .Width("100%")
                                      .FocusStateEnabled(false)
                                      .HoverStateEnabled(true)
                                      .Disabled(new JS("!iudAuth()"))
                                  ).ColSpan(1);
                          })
                          .FormData(Model)
            )
        </div>
        <div class="col-lg-8 col-sm-12">
            <h4><span class="dx-fieldset-header"><i class="fa fa-angle-right">@LabelText.RELEASE @LabelText.SCHEDULE @LabelText.STOCK</i></span></h4>
            @(Html.DevExtreme().Form<PODB001_LIST>
                          ()
                          .ID("form_stock")
                          .ColCount(4)
                          //.ScrollingEnabled(true)
                          .Items(items =>
                          {
                              items.AddSimple()
                                  .Editor(e => e
                                      .TextBox().ID("ScanBarcode")
                                      //.InputAttr("class", "largeTextboxInput")
                                      .OnEnterKey("ScanBarcode_onEnterKey")
                                      .OnInitialized("ScanBarcode_onInitialized")
                                  ).Name("ScanBarcode")
                                  .Label(T => T.Text(LabelText.SERIAL + " " + LabelText.BARCODE)).CssClass("widgetLabelFontSize")
                                  .ColSpan(3);

                              items.AddButton()
                                  .ButtonOptions(b => b.ID("btnStockSelect")
                                      .Text(LabelText.STOCK + LabelText.SELECTION)
                                      .Type(ButtonType.Default)
                                      .StylingMode(ButtonStylingMode.Contained)
                                      .OnClick("btnStockSelect_onClick")
                                      .Width("100%")
                                      .FocusStateEnabled(false)
                                      .HoverStateEnabled(true)
                                      .Disabled(new JS("!iudAuth()"))
                                  ).ColSpan(1);

                    @*items.AddSimple()
                        .ColSpan(1)
                        .Template(@<text>
                            @( Html.DevExtreme().Button().Text(LabelText.STOCK + LabelText.SELECTION)
                            .StylingMode(ButtonStylingMode.Contained)
                            .Width("100%")
                            .FocusStateEnabled(false)
                            .HoverStateEnabled(true)
                            .Type(ButtonType.Default)
                            .ID("btnStockSelect")
                            .OnClick("btnStockSelect_onClick")
                            )
                        </text>);*@

                            items.AddSimple()
                                .ColSpan(4)
                                .Template(@<text>
                                    @(Html.DevExtreme().DataGrid<PODB001_LIST>
                                                  ()
                                                  .ID("grdDevProductStock")
                                                  .DataSource(new[]
                                                  {
                                                            new { SERIALNUMBER = "", LOTNUMBER = "" }

                                                                }, "SERIALNUMBER")
                                                  .RepaintChangesOnly(true)
                                                  .Columns(columns =>
                                                  {
                                                      columns.AddFor(m => m.PLANTCODE).AllowEditing(false).Visible(false);
                                                      columns.AddFor(m => m.LOTNUMBER).SortOrder(SortOrder.Asc).AllowEditing(false);
                                                      columns.AddFor(m => m.SERIALNUMBER).SortOrder(SortOrder.Asc).AllowEditing(false);
                                                      columns.AddFor(m => m.PRODUCTTYPE).AllowEditing(false).Visible(false)
                                                          .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                                              .Controller("COMA003WebApi").Key("SYSCODE")
                                                              .LoadAction("PRODUCTTYPE_LIST")
                                                              .LoadParams(new { Culture = new JS("function() { return locale; }") }))
                                                              .DisplayExpr("SYSCODENAME")
                                                              .ValueExpr("SYSCODE")
                                                          );
                                                      columns.AddFor(m => m.PARTNUMBER).AllowEditing(false);
                                                      columns.AddFor(m => m.PRODUCTNAME).AllowEditing(false);
                                                      columns.AddFor(m => m.QUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0)).AllowEditing(false);
                                                      columns.Add()
                                                          .Type(GridCommandColumnType.Buttons)
                                                          .Width(110)
                                                          .Buttons(b =>
                                                          {
                                                                            //b.Add().Name(GridColumnButtonName.Edit);
                                                                            //b.Add().Name(GridColumnButtonName.Delete);

                                                                            b.Add()
                                                                                .Hint("Delete")
                                                                                .Icon("trash")
                                                                                .Visible(new JS("!iudAuth()"))
                                                                                .OnClick("delIconClick");
                                                          });
                                                  })
                                                  .FilterPanel(f => f.Visible(false))
                                                  .ColumnAutoWidth(true)
                                                  .Paging(p => p.PageSize(50).Enabled(true))
                                                  .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                                                  .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                                  .FilterRow(filterRow => filterRow
                                                      .Visible(false)
                                                      .ApplyFilter(GridApplyFilterMode.Auto)
                                                  )

                                                  .Editing(e =>
                                                  {
                                                      e.Mode(GridEditMode.Batch);
                                                      //.AllowUpdating(false)
                                                      //.Texts(t => t.ConfirmDeleteMessage(""));
                                                      //.AllowDeleting(new JS("function() { return true }"));
                                                      e.UseIcons(true);
                                                  })
                                                  //.StateStoring(s => s.Enabled(true).StorageKey("PODB001_grdDevProductStock").Type(StateStoringType.LocalStorage))
                                                  .ShowBorders(true)
                                                  .AllowColumnResizing(true)
                                                  .RowAlternationEnabled(true)
                                                  .OnCellPrepared("grdDevProductStock_OnCellPrepared")
                                                  .OnContentReady("grdDevProductStock_OnContentReady")
                                                  .OnRowInserted("grdDevProductStock_OnRowInserted")
                                                  .OnToolbarPreparing("grdDevProductStock_OnToolbarPreparing")
                                    )
                                </text>);
                            }
                            ))

        </div>
    </div>
</div>

@*재고 선택 팝업창 _ FORM*@
@(Html.DevExtreme().Popup()
              .ID("STOCK_POPUP")
              .ElementAttr("class", "popup")
              .ShowTitle(true)
              .DragEnabled(false)
              .ContentTemplate(new TemplateName("EmbeddedPODB001_ProductStock"))
              .FullScreen(false)
              .ShowCloseButton(true)
              .Width("100%")
              .Height(600)
              .Title(LabelText.STOCK + LabelText.LIST)
    //.OnHidden("EMPUSER_POPUP_onHidden")
)

@*업체 선택 GRID*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedPODB001_Vendor"))
{
    @(Html.DevExtreme().DataGrid<VendorMaster>
            ()
            .ID("embedded-vendor-datagrid")
            .DataSource(new JS(@"component.option(""dataSource"")"))
            .Columns(columns =>
            {
                columns.AddFor(m => m.VENDORNAME);
                columns.AddFor(m => m.TELEPHONE);
                columns.AddFor(m => m.ADDRESS);
            })
            .RemoteOperations(true)
            .ColumnAutoWidth(true)
            .HoverStateEnabled(true)
            .Paging(p => p.PageSize(10))
            .FilterRow(f => f.Visible(true))
            .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
            .Selection(s => s.Mode(SelectionMode.Single))
            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
            .OnSelectionChanged(@<text>
                function(selectedItems) {
                var haskey;
                var keys = selectedItems.selectedRowKeys;
                if(typeof keys !== 'undefined' && keys.length > 0)
                {
                haskey = true;
                }

                component.option("value", haskey ? keys[0] : null);
                if(typeof keys !== 'undefined' && keys.length > 0){
                component.close();
                }
                }
            </text>)
    )
}

@*제품 재고 선택 GRID*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedPODB001_ProductStock"))
{
    @(Html.DevExtreme().Form<PODB001_LIST>
          ()
          .ID("popForm")
          .ScrollingEnabled(false)
          .Items(items =>
          {
              items.AddSimple()
                  .Template(@<text>
                                @( Html.DevExtreme().DataGrid<PODB001_LIST>
                                       ()
                                       .ID("grdProductStock")
                                       .DataSource(d => d.WebApi().Controller("PODB001WebApi").Key("SERIALNUMBER")//.LoadAction("CheckStockSerialnumber")
                                       )
                                       .Columns(columns =>
                                       {
                                           columns.AddFor(m => m.PLANTCODE).Visible(false);
                                           columns.AddFor(m => m.LOTNUMBER).AllowEditing(false);
                                           columns.AddFor(m => m.SERIALNUMBER).AllowEditing(false).SortOrder(SortOrder.Asc);
                                           columns.AddFor(m => m.PARTNUMBER).AllowEditing(false);
                                           columns.AddFor(m => m.PRODUCTNAME).AllowEditing(false);
                                           columns.AddFor(m => m.QUANTITY).Format(f => f.Type(Format.FixedPoint).Precision(0)).AllowEditing(false);
                                       })
                                       .HeaderFilter(h => h.Visible(false))
                                       .ColumnHidingEnabled(true)
                                       .SearchPanel(s => s.Visible(true))
                                       .ColumnResizingMode(ColumnResizingMode.Widget)
                                       .AllowColumnResizing(true)
                                       .RowAlternationEnabled(true)
                                       .ShowBorders(false)
                                       .ShowColumnLines(false)
                                       .ShowRowLines(false)
                                       .ColumnAutoWidth(true)
                                       .AllowColumnReordering(true)
                                       .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Infinite))
                                       .RemoteOperations(true)
                                       //.Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                       //.Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true))
                                       //.Paging(paging => paging.PageSize(50))
                                       .Height(500)
                                       //.Pager(pager =>
                                       //{
                                       //    pager.ShowPageSizeSelector(true);
                                       //    pager.AllowedPageSizes(new List<int>{50, 100, 200});
                                       // //})
                                       .Selection(s => s.Mode(SelectionMode.Multiple)) //.ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always))
                                       .OnInitialized("grdProductStock_OnInitialized")
                                      //.OnRowClick("grdHR_onRowClick")
                                      )
                             </text>);

              items.AddButton()
                  .ButtonOptions(b => b.ID("btnStockSave")
                      .Text(LabelText.CONFIRM)
                      .Type(ButtonType.Success)
                      .StylingMode(ButtonStylingMode.Contained)
                      .OnClick("popForm_btnStockSave")
                      .Width("100%")
                      .FocusStateEnabled(false)
                      .HoverStateEnabled(true)
                      .Disabled(new JS("!iudAuth()"))
                  );
          }
          ))
}

<script>
            var delIconClick = function (e) {

                $('#grdDevProductStock').dxDataGrid('instance').getDataSource().store().remove(e.row.key);
                //$('#grdDevProductStock').dxDataGrid('instance').deleteRow(e.row.rowIndex);
                $('#grdDevProductStock').dxDataGrid('instance').refresh();

                //$('#grdDevProductStock').dxDataGrid('instance');
                //var clonedItem = $.extend({}, e.row.data, { ID: ++maxID });

                //employees.splice(e.row.rowIndex, 0, clonedItem);
                //e.component.refresh(true);
                //e.event.preventDefault();
                //setTotalQty();
            }
            function grdDevProductStock_OnCellPrepared(e) {
                if (e.rowType == 'header') {
                    e.cellElement.css('text-align', 'center');
                }
            }
            function grdProductStock_OnInitialized(e) {
                userCustomGrid(e);
            }

            function ScanBarcode_onInitialized(e) {
                /*
                setTimeout(function () {
                    e.component.focus();
                }, 0);
                */
            }

            function grdDevProductStock_OnRowInserted(e) {
                setTotalQty();

            }

            function grdDevProductStock_OnContentReady(e) {
                var FirstRowBoxSerialNoValue = $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'SERIALNUMBER');
                if (FirstRowBoxSerialNoValue == "") {
                    $('#grdDevProductStock').dxDataGrid('instance').getDataSource().store().remove('');
                    $('#grdDevProductStock').dxDataGrid('instance').refresh();
                    //$('#grdDevProductStock').dxDataGrid('instance').deleteRow(0);
                    //$('#grdDevProductStock').dxDataGrid('instance').saveEditData();
                }

                setTotalQty();
            }

            function ScanBarcode_onEnterKey(e) {
                var txt = e.component._options.value;
                var IsExistBoxSerial = false;

                if (txt == null || txt == "") {
                    $('#ScanBarcode').dxTextBox('instance').reset();
                    $('#ScanBarcode').dxTextBox('instance').focus();

                    DevExpress.ui.notify('@LabelText.ANSWERRESCAN', 'error', globalNotificationErrorTime);
                    return;
                }

                var pairindex = $('#grdDevProductStock').dxDataGrid('instance').getRowIndexByKey(txt);
                if (pairindex >= 0) {
                    IsExistBoxSerial = true;
                }

                //var FirstRowBoxSerialNoValue = $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'SERIALNUMBER');

                if (IsExistBoxSerial == true) {
                    $('#ScanBarcode').dxTextBox('instance').reset();
                    $('#ScanBarcode').dxTextBox('instance').focus();

                    DevExpress.ui.notify('@LabelText.ANSWERSCANEDBARCODE', 'error', globalNotificationErrorTime);
                    return;
                } else {

                    $.ajax({
                        url: '@Url.Action("CheckStockSerialnumber", "PODB001WebApi", new { httproute = "DefaultApi" })' + "?" + "SERIALNUMBER=" + txt,
                        type: 'GET',
                        success: function (data) {

                            if (data.data.length <= 0) {
                                DevExpress.ui.dialog.alert("@LabelText.ANSWERNOEXIST", "warning");
                                $('#ScanBarcode').dxTextBox('instance').reset();
                                $('#ScanBarcode').dxTextBox('instance').focus();
                                return;
                            } else {

                                //if (FirstRowBoxSerialNoValue == "") {
                                //    $('#grdDevProductStock').dxDataGrid('instance').deleteRow(0);
                                //}

                                $('#grdDevProductStock').dxDataGrid('instance').addRow();
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PLANTCODE', data.data[0].PLANTCODE);
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'LOTNUMBER', data.data[0].LOTNUMBER);
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'SERIALNUMBER', data.data[0].SERIALNUMBER);
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PRODUCTTYPE', data.data[0].PRODUCTTYPE);
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PARTNUMBER', data.data[0].PARTNUMBER);
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PRODUCTNAME', data.data[0].PRODUCTNAME);
                                $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'QUANTITY', data.data[0].QUANTITY);
                                
                                $('#grdDevProductStock').dxDataGrid('instance').saveEditData();
                                //setTotalQty();

                                $('#ScanBarcode').dxTextBox('instance').reset();
                                $('#ScanBarcode').dxTextBox('instance').focus();

                            }
                        },
                        error: function () {
                            console.log("error");
                            showError(this, e);
                        }
                    });
                }
            }

            function btnStockSelect_onClick(e) {
                $("#STOCK_POPUP").dxPopup("instance").show();
            }

            function popForm_btnStockSave(e) {


                var selectedRowCount = $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData().length;

                for (var i = 0; i < selectedRowCount; i++) {
                    var pairData = $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].SERIALNUMBER;
                    var findrowindex = $('#grdDevProductStock').dxDataGrid('instance').getRowIndexByKey(pairData);
                    if (findrowindex == -1) {
                        $('#grdDevProductStock').dxDataGrid('instance').addRow();
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PLANTCODE', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].PLANTCODE);
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'LOTNUMBER', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].LOTNUMBER);
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'SERIALNUMBER', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].SERIALNUMBER);
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PRODUCTTYPE', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].PRODUCTTYPE);
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PARTNUMBER', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].PARTNUMBER);
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'PRODUCTNAME', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].PRODUCTNAME);
                        $('#grdDevProductStock').dxDataGrid('instance').cellValue(0, 'QUANTITY', $('#grdProductStock').dxDataGrid('instance').getSelectedRowsData()[i].QUANTITY);
                        //$('#grdDevProductStock').dxDataGrid('instance').saveEditData();
                    }
                }
                $('#grdDevProductStock').dxDataGrid('instance').saveEditData();


                $('#grdProductStock').dxDataGrid('instance').clearSelection();

                $("#STOCK_POPUP").dxPopup("instance").hide();

                $('#ScanBarcode').dxTextBox('instance').reset();
                $('#ScanBarcode').dxTextBox('instance').focus();
            }

            function setTotalQty() {
                var cnt = $('#grdDevProductStock').dxDataGrid('instance').totalCount();
                var totalQty = 0;
                if (cnt > 0) {
                    for (var i = 0; i < cnt; i++) {
                        var rowQty = $('#grdDevProductStock').dxDataGrid('instance').cellValue(i, 'QUANTITY');
                        totalQty = totalQty + rowQty;
                    }
                }

                $('#form').dxForm('instance').option('formData.DELIVERYQUANTITY', totalQty);
            }

            function SetLabelText(e) {
                $('#form_stock').dxForm('instance').updateData('ScanBarcode', e);
            }

            function btnSave_OnClick(e) {
                var grid = $("#grdDevProductStock").dxDataGrid("instance");
                var cnt = grid.totalCount();

                var vendor = $('#form').dxForm('instance').option('formData.VENDORCODE');
                var workdate = $('#form').dxForm('instance').option('formData.WORKDATE');
                var memo = $('#form').dxForm('instance').option('formData.MEMO');

                if (vendor == "" || vendor == undefined) {
                    DevExpress.ui.dialog.alert("@LabelText.ANSWERPLEASESELECTVENDOR", "warning");
                    //$('#ORDERNUMBER').dxTextBox('instance').focus();
                    return;
                }
                var result = DevExpress.ui.dialog.confirm("@LabelText.QUESTIONRELEASE", "Confirm changes");
                result.done(function (dialogResult) {
                    if (!dialogResult) {
                        return;
                    } else {
                        if (cnt > 0) {

                            var aJsonArray = new Array();
                            var aJson = new Object();

                            for (var Index = 0; Index < cnt; Index++) {
                                aJson = new Object();
                                aJson.PLANTCODE = grid.cellValue(Index, 'PLANTCODE');
                                aJson.WORKDATE = workdate;
                                aJson.VENDORCODE = vendor;
                                aJson.MEMO = memo;
                                aJson.SERIALNUMBER = grid.cellValue(Index, 'SERIALNUMBER');
                                aJson.LOTNUMBER = grid.cellValue(Index, 'LOTNUMBER');
                                aJson.PARTNUMBER = grid.cellValue(Index, 'PARTNUMBER');
                                aJson.QUANTITY = grid.cellValue(Index, 'QUANTITY');
                                aJsonArray.push(aJson);
                            }

                            var data = new Object();
                            data.data = JSON.stringify(aJsonArray);

                            //var param = $.param({ ORDERNUMBER: orderno, Culture: locale });

                            $.ajax({
                                url: '@Url.Action("post", "PODB001WebApi", new {httproute = "DefaultApi", })', // + "?" + param,
                                type: 'POST',
                                data: data,
                                success: function () {
                                    setRefresh();

                                    $('#ScanBarcode').dxTextBox('instance').reset();
                                    $('#ScanBarcode').dxTextBox('instance').focus();
                                },
                                error: function (e) {
                                    console.log(data);
                                    showError(this, e);
                                }
                            });
                        } else {
                            DevExpress.ui.dialog.alert("@LabelText.ANSWERNOTSHIPPINGQTY", "warning");
                            //$('#ORDERNUMBER').dxTextBox('instance').focus();
                            return;
                        }
                    }
                });
            }

            function btnClear_OnClick(e) {
                setRefresh();

                $('#ScanBarcode').dxTextBox('instance').reset();
                $('#ScanBarcode').dxTextBox('instance').focus();
            }

            function form_OnValueChanged(e) {
                $('#ScanBarcode').dxTextBox('instance').focus();

            }

            function setRefresh() {

                var grid = $("#grdDevProductStock").dxDataGrid("instance");
                var grid2 = $('#embedded-vendor-datagrid').dxDataGrid('instance');
                var cnt = grid.totalCount();

                //var FirstRowBoxSerialNoValue =

                for (var Index = 0; Index < cnt; Index++) {
                    var delData = $('#grdDevProductStock').dxDataGrid('instance').cellValue(Index, 'SERIALNUMBER');
                    $('#grdDevProductStock').dxDataGrid('instance').getDataSource().store().remove(delData);
                    //grid.deleteRow();
                }
                $('#grdDevProductStock').dxDataGrid('instance').refresh();
                //grid.saveEditData();

                $('#form').dxForm('instance').option('formData.VENDORCODE', undefined);

                if (grid2 != undefined)
                    $('#embedded-vendor-datagrid').dxDataGrid('instance').clearSelection();

                $('#form').dxForm('instance').option('formData.MEMO', undefined);
                $('#form').dxForm('instance').option('formData.DELIVERYQUANTITY', 0);
            }

            // FORM 그리드 상위 버튼 제거
            function grdDevProductStock_OnToolbarPreparing(e) {
                var toolbarItems = e.toolbarOptions.items;
                $.each(toolbarItems, function (_, item) {
                    if (item.name === "saveButton" || item.name == "revetButton" || item.name == "addRowButton") {
                        // Change the item options here
                        item.visible = false;
                    }
                });
            }


</script>
