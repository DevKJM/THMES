@using Microsoft.AspNet.Identity;
@using JSMES.WebUI.Alpha.App_GlobalResources;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.ViewModels.MST.MSTG;

@{
    ViewBag.Title = "Main";
}

<style>
    .dx-treelist-adaptive-more:before {
        content: "\f016";
    }

    .dx-layout-manager .dx-label-h-align.dx-flex-layout .dx-field-item-label {
        display: none;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-4">
            <h4><span class="bottom-gradient"><i class="fa fa-angle-right"> @LabelText.PRODUCTLIST</i></span></h4>
            @(Html.DevExtreme().DataGrid<PartNumberMaster>()
                .ID("grdProductList")
                .DataSource(d => d.WebApi()
                    .Controller("COMA001WebApi")
                    .LoadAction("PART_LIST")
                    .Key("PARTNUMBERID")
                )
                .Columns(columns =>
                {
                    columns.AddFor(m => m.PARTNUMBERID).Visible(false);
                    columns.AddFor(m => m.PARTNUMBER);
                    columns.AddFor(m => m.PRODUCTNAME);
                    columns.AddFor(m => m.MEMO);
                })
                .FilterPanel(f => f.Visible(true)) //하단 필터 만들기 표시 여부
                .ColumnAutoWidth(true)
                .Paging(p => p.PageSize(10).Enabled(true))
                .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Width(180)
                    .Placeholder("Search...")
                )
                .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .ShowBorders(true)
                .AllowColumnResizing(true)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true).ExcelFilterEnabled(true).AllowExportSelectedData(true))
                .Selection(s => s.Mode(SelectionMode.Single)) // Row 선택 모드 (단일선택)
                .Option("KEY_FIELD", new object[] { "PARTNUMBER", "PRODUCTNAME" })
                .OnRowClick("grdProductList_OnRowClick")
            )
        </div>
        <div class="col-lg-8">
            <h4><span class="bottom-gradient"><i class="fa fa-angle-right"> @LabelText.PROCESSBOMINFORMATION</i></span></h4>
                    @(Html.DevExtreme().TreeList<MSTG022_LIST>()
                        .ID("trBOMMaster")
                        .ParentIdExpr("UPPERPARTNUMBER")
                        .KeyExpr("BOMID")
                        .RootValue("00000000-0000-0000-0000-000000000000")
                        .DataSource(d => d.WebApi().Controller("MSTG022WebApi").Key("BOMID")
                        .OnBeforeSend("trBOMMaster_OnBeforeSend"))
                        .DataStructure(TreeListDataStructure.Plain)
                        .AllowColumnReordering(true)
                        .ShowRowLines(true)
                        //.AutoExpandAll(true)
                        .Selection(s => s.Mode(SelectionMode.None).Recursive(true))
                        .Scrolling(s => s.Mode(TreeListScrollingMode.Standard))
                        .AutoExpandAll(true)
                        .Columns(columns =>
                        {
                            columns.AddFor(m => m.BOMID).Visible(false);
                            columns.AddFor(m => m.PRODUCTNAME).CalculateCellValue("function(rowdata){ return rowdata.PARTNUMBER;}").AllowEditing(false);
                            columns.AddFor(m => m.PARTNUMBER).AllowEditing(true)
                                                    .Lookup(l => l.DataSource(d => d.WebApi()
                                                          .Controller("MSTG022WebApi")
                                                          .LoadAction("getPartList")
                                                          .Key("PARTNUMBER"))
                                                          .ValueExpr("PARTNUMBER")
                                                          .DisplayExpr("PRODUCTNAME").AllowClearing(true))
                                                          .EditCellTemplate(new TemplateName("EmbeddedPART"));
                            columns.AddFor(m => m.PROCESSBOM).AllowEditing(false).CellTemplate(new TemplateName("EmbeddedProcessBOM")).HidingPriority(0).MinWidth(500);
                            columns.AddFor(m => m.UPPERPARTNUMBER).Visible(false);
                            //columns.AddFor(m => m.USAGEVALUE).Format(f => f.Type(Format.FixedPoint).Precision(3)).AllowEditing(true).ValidationRules(v => v.AddRange().Max(5));
                            columns.AddFor(m => m.USAGE).Format("#,##0.###")//.Format(f => f.Type(Format.FixedPoint).Precision(3))
                                .AllowEditing(true).ValidationRules(v => v.AddRange().Max(5));
                            columns.AddFor(m => m.UNITCODE)
                                .Lookup(lookup => lookup
                                    .DataSource(d => d.WebApi()
                                        .Controller("COMA003WebApi").Key("SYSCODE")
                                        .LoadAction("UNITCODE_LIST"))
                                    .DisplayExpr("SYSCODENAME")
                                    .ValueExpr("SYSCODE")
                                ).AllowEditing(false);
                        })
                        .FilterPanel(f => f.Visible(false))
                        .ColumnAutoWidth(true)
                        .Paging(p => p.PageSize(25).Enabled(true))
                        .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                        .SearchPanel(searchPanel => searchPanel
                            .Visible(true)
                            .Width(180)
                            .Placeholder("Search...")
                        )
                        .Sorting(c=>c.Mode(GridSortingMode.None))
                        .ShowBorders(true)
                        .ShowColumnLines(false)
                        .ShowRowLines(true)
                        .ShowColumnHeaders(true)
                        .AllowColumnResizing(true)
                        .Selection(s => s.Mode(SelectionMode.Single))
                        .OnEditingStart("trBOMMaster_OnEditingStart")
                        .OnContentReady("trBOMMaster_onContentReady")
                        .OnCellPrepared("trBOMMaster_OnCellPrepared")
                        .OnToolbarPreparing("trBOMMaster_onToolbarPreparing")
                    )

        </div>
    </div>
</div>


@using (Html.DevExtreme().NamedTemplate("EmbeddedPART"))
{
    @(Html.DevExtreme().DropDownBox()
        .ID("ddbPart")
        .Value(new JS("data.PARTNUMBER"))
        .ValueExpr("PARTNUMBER")
        .DisplayExpr("PRODUCTNAME")
        .DataSource(d => d.WebApi().Controller("MSTG022WebApi").LoadAction("getPartList").Key("PARTNUMBER"))
        .AcceptCustomValue(true)
        .OnValueChanged(@<text>
            function(e){
                setValue(e.value[0]);
            }
            </text>)
        .OnOpened(@<text>
        function (e) {
                e.component.content().parent().width(350);

                var trans = e.component.content().parent().css('transform');
                var matrix = trans.replace(/[^0-9\-.,]/g, '').split(',');
                var vLeft = 350 - (window.innerWidth - matrix[4]);
                if (vLeft > 0) {
                    e.component.content().parent().css('left', -(vLeft + 5));
                }
            }
        </text>)
        .ContentTemplate(new TemplateName("EmbeddedPARTSingle"))
    )
}

@using(Html.DevExtreme().NamedTemplate("EmbeddedPARTSingle")) {
    @(Html.DevExtreme().DataGrid<PartNumberMaster>()
        .ID("grdPartSingle")
        .DataSource(new JS(@"component.option(""dataSource"")"))
        .Columns(columns => {
            columns.AddFor(m=>m.PARTNUMBER);
            columns.AddFor(m=>m.PRODUCTNAME);
        })
        .HoverStateEnabled(true)
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .ShowRowLines(true)
        .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
        .Height(345)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS(@"component.option(""value"")"))
        .OnSelectionChanged(@<text>
            function(selectedItems) {
                var keys = selectedItems.selectedRowKeys;
                component.option("value", keys);
            }
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("EmbeddedProcessBOM"))
{
    @(Html.DevExtreme().DataGrid<MSTG022B_LIST>()
            .ID("grdProcessBOMMaster")
            .DataSource(d => d.WebApi()
                .Controller("MSTG022WebApi")
                .LoadAction("getProcessBOMList")
                .Key("PROCESSBOMID")
                .LoadParams(new { BOMID = new JS("function() { return data.BOMID; }") })
                .OnBeforeSend("grdProcessBOMMaster_OnBeforeSend")
            )
            .Columns(columns =>
            {
                columns.AddFor(m => m.PROCESSBOMID).Visible(false);
                columns.AddFor(m => m.PROCESSCODE)
                .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                        .Controller("MSTG022WebApi").Key("PROCESSCODE")
                        .LoadAction("getRouteList")
                        .LoadParams(new { Partnumber = new JS("function() { " +
                        " var productList = $('#grdProductList').dxDataGrid('instance'); " +
                        " var productListRow = productList.getSelectedRowsData(); " +
                        " return productListRow[0].PARTNUMBER; "+
                        " } ") }))
                        .DisplayExpr("PROCESSNAME")
                        .ValueExpr("PROCESSCODE")
                    );
                //columns.AddFor(m => m.USAGEVALUE).Format(f => f.Type(Format.FixedPoint).Precision(3));
                columns.AddFor(m => m.USAGE).Format("#,##0.###");//.Format(f=>f.Type(Format.FixedPoint).Precision(3));
                columns.AddFor(m => m.UNITCODE).Visible(false);
                columns.AddFor(m => m.USEYN).Lookup(c => c.DataSource(new JS("USE_YN"))
                    .DisplayExpr("NAME")
                    .ValueExpr("CODE"));
                columns.AddFor(m => m.CREATEUSER);
                columns.AddFor(m => m.CREATEDATE).Format(f => f.Type(Format.ShortDateShortTime));
                columns.AddFor(m => m.RECENTUSER);
                columns.AddFor(m => m.RECENTDATE).Format(f => f.Type(Format.ShortDateShortTime));
            })
            .Editing(e =>
                e.Mode(GridEditMode.Batch)
                    .AllowUpdating(true)
                    .AllowAdding(true)
                    .AllowDeleting(true)
            )
            //.Option("INIT_FIELD", new object[] { "USEYN", "PARTNUMBER" })
            .OnInitialized(@<text>
                    function grdPartNumber_OnInitialized(e) {
                    userCustomGrid(e);
                }
            </text>)
            .ColumnAutoWidth(true)
            .Paging(p => p.PageSize(10).Enabled(true))
            .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
            .Scrolling(s => s.Mode(GridScrollingMode.Standard))
            .AllowColumnResizing(true)
            .RowAlternationEnabled(true)
          //.OnInitialized("grdProcessBOMMaster_OnInitialized")
            .Option("INIT_FIELD", new object[] { "USEYN" })
            .OnInitialized(@<text>
                    function(e) {
                        //userCustomGrid(e);
                    }
            </text>)
            .OnInitNewRow(@<text>
                function(e){
                e.data.BOMID = data.BOMID;
                e.data.USEYN = "Y";
                }
                </text>)
        )
}

<script>
    var treeLevel = [];
    var grid;

    treeLevel[2] = 'rgba(142,194,194,1)';
    treeLevel[3] = 'rgba(142,194,194,0.7)';
    treeLevel[4] = 'rgba(142,194,194,0.3)';
    treeLevel[5] = 'rgba(142,194,194,0.0)';

    function grdProcessBOMMaster_AllowDeleting (e) {
        if (e.row.rowType == "data") {
            if (e.row.key != undefined) {
                return false;
            }
        }
        return true;
    }

    function grdProcessBOMMaster_OnBeforeSend(method, ajaxOptions) {

        if (method == "insert") {
            var tmp = JSON.parse(ajaxOptions.data.values);
            var selectrow = $('#trBOMMaster').dxTreeList('instance').getSelectedRowsData();

            if (selectrow[0].UNITCODE == "U02") {
                tmp.USAGE = Math.round(tmp.USAGE * 1000);
            } else {
                tmp.USAGE = Math.round(tmp.USAGE);
            }

            ajaxOptions.data.values = JSON.stringify(tmp);

        } else if (method == "update") {

            var selectrow = $('#trBOMMaster').dxTreeList('instance').getSelectedRowsData();
            var unitcode = selectrow[0].UNITCODE;

            ajaxOptions.data.UNITCODE = unitcode;

            var tmp = JSON.parse(ajaxOptions.data.values);

            if (unitcode == "U02") {
                if (tmp.USAGE != undefined)
                    tmp.USAGE = Math.round(tmp.USAGE * 1000);
            } else {
                if (tmp.USAGE != undefined)
                    tmp.USAGE = Math.round(tmp.USAGE);
            }

            ajaxOptions.data.values = JSON.stringify(tmp);

        //    var index = $('#grdProcessBOMMaster').dxDataGrid('instance').getRowIndexByKey(ajaxOptions.data.key);
        //    var unitcode = $('#grdProcessBOMMaster').dxDataGrid('instance').cellValue(index, 'UNITCODE');
        }
    }

    function trBOMMaster_OnCellPrepared(e) {
        if (e.rowType === "data" && e.column.dataField === "PRODUCTNAME") {
            if (e.data.LEVELNO > 1)

                if(e.data.LEVELNO >= 5)
                    e.cellElement.css("color", 'black');

                e.cellElement.css("background-color", treeLevel[e.data.LEVELNO]);
        }
    }

    function trBOMMaster_OnBeforeSend(method, ajaxOptions) {
        if (method == "load" || method == "insert") {
            var productList = $('#grdProductList').dxDataGrid('instance');

            var productListRow = productList.getSelectedRowsData();

            if (productListRow.length > 0) {
                ajaxOptions.data.ROOTPARTNUMBER = productListRow[0].PARTNUMBER;
            } else {
                ajaxOptions.data.ROOTPARTNUMBER = "";
            }
        }
    }

    function trBOMMaster_OnEditingStart(e) {
        if (e.data.LEVELNO == 1) {
            e.cancel = true;
        }
    }
    
    function grdProcessBOMMaster_OnInitialized(e) {
        userCustomGrid(e);

    }
    function trBOMMaster_onContentReady(e) {
        e.component.columnOption("command:add", "visible", false);
    }

    function trBOMMaster_onToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        // Modifies an existing item
        $.each(toolbarItems, function (_, item) {
            if (item.name == "addRowButton") {
                // Change the item options here
                item.visible = false;
            }
        });
    }

    function trBOMMaster_AllowDeleting(e) {
        if (e.row.rowType == "data") {
            if (e.row.data.LEVELNO == 1) {
                return false;
            }
        }
        return true;
    }

    function grdProductList_OnRowClick(e) {
        var list = $('#trBOMMaster').dxTreeList('instance');
        list.refresh();

        window.setTimeout(function() {
            var keys = getNodeKeys(list.getRootNode());
            list.beginUpdate();
            keys.forEach(function(key) {  
                list.expandRow(key);
            }); 
            list.endUpdate();
        }, 500);

    };

    var getNodeKeys = function(node) {
        var keys = [];
        keys.push(node.key);
        node.children.forEach(function(item) {              
            keys = keys.concat(getNodeKeys(item));
        });            
        return keys;
    }
</script>