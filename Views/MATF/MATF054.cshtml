@using Microsoft.AspNet.Identity;

@using JSMES.WebUI.Alpha.App_GlobalResources;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.ViewModels.MAT.MATF;
@using JSMES.WebUI.Alpha.ViewModels.COM;
@using JSMES.WebUI.Alpha.Models.LogStruct;

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="options">
                <div class="option">
                    <span>@LabelText.SELECT @LabelText.DATE</span>
                    @(Html.DevExtreme().DateBox()
                        .ID("searchFrom")
                        .DisplayFormat(Format.MonthAndYear)
                        .CalendarOptions(o=>o.MaxZoomLevel(CalendarZoomLevel.Year).MinZoomLevel(CalendarZoomLevel.Century))
                        .Type(DateBoxType.Date)
                        .Value(new JS("new Date()"))
                        .OnValueChanged("function(e) { $('#grdMaterialReceive').dxDataGrid('instance').refresh(); $('#chtMaterialReceive').dxChart('instance').refresh(); } ")
                        .DisplayFormat(Format.MonthAndYear)
                    )
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @(Html.DevExtreme().Chart()
                .ID("chtWarehouseTemp")
                .Palette(VizPalette.GreenMist)
                .DataSource(d => d.WebApi().Controller("MATF054WebApi").Key("SEQUENCE", "WAREHOUSECODE").OnBeforeSend("chtWarehouseTemp_OnBeforeSend"))
                .Size(s=>s.Height(200))
                .Title("창고 온도")                
                .Tooltip(t => t
                    .Enabled(true)
                    .Format(f=>f.Type(Format.FixedPoint).Precision(2))
                )
                .SeriesTemplate(s=>s.NameField("WAREHOUSECODE"))
                .ArgumentAxis(x=>x.Label(l=>l.Format(Format.ShortDateShortTime)).ArgumentType(ChartDataType.DateTime))
                .ValueAxis(v=>v.Add().ValueType(ChartDataType.Numeric).ValueMarginsEnabled(true).Type(AxisScaleType.Discrete))
                .CommonSeriesSettings(s => s
                    .ArgumentField("WORKDATE")
                    .ValueField("TEMPERATURE")                    
                    .Type(SeriesType.Line)
                    .Label(l => l
                        .Visible(true)
                        .Format(f => f
                            .Type(Format.FixedPoint)
                            .Precision(2)
                        )
                    )
                )                
                .Legend(l => l
                    .VerticalAlignment(VerticalEdge.Top)
                    .HorizontalAlignment(HorizontalAlignment.Left)
                    .CustomizeText("function(seriesInfo){ return $('#chtWarehouseTemp').dxChart('instance').getSeriesByName(seriesInfo.seriesName)._data[0].data.WAREHOUSENAME; }")
                ))
        </div>
    </div>
     <div class="row mt-3">
        <div class="col-lg-12">
            @(Html.DevExtreme().DataGrid<MATF054_LIST>()
                .DataSource(d => d.WebApi().Controller("MATF054WebApi").Key("SEQUENCE").OnBeforeSend("chtWarehouseTemp_OnBeforeSend"))
                .FilterRow(f=>f.Visible(true))
                .ShowRowLines(true)
                .Columns(columns =>
                {
                    columns.AddFor(m=>m.WORKDATE).DataType(GridColumnDataType.DateTime).Format(f=>f.Type(Format.ShortDateShortTime)).SortOrder(SortOrder.Desc);
                    columns.AddFor(m=>m.WAREHOUSECODE)
                       .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                               .Controller("COMA001WebApi")
                                .Key("WAREHOUSECODE")
                                .LoadAction("WAREHOUSE_MATERIAL_LIST")
                            )
                            .DisplayExpr("WAREHOUSENAME")
                            .ValueExpr("WAREHOUSECODE")
                       );
                    columns.AddFor(m=>m.TEMPERATURE).DataType(GridColumnDataType.Number).Format(f=>f.Type(Format.FixedPoint).Precision(2));
                    columns.AddFor(m=>m.MEMO);

                })
                .ColumnHidingEnabled(true)
                .SearchPanel(c=>c.Visible(true))
                .RemoteOperations(true)
                .Paging(p=>p.PageSize(25).Enabled(true))
                .Pager(p=>p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[]{ 10, 25, 50, 100, 1000}))
                .AllowColumnResizing(true)
                .RowAlternationEnabled(true)
                .Editing(e=>e.Mode(GridEditMode.Batch).AllowAdding(true).AllowUpdating(true).AllowDeleting(true))
                .OnContentReady("OnContentReady")
                .OnInitialized("OnInitialized")
                .OnInitNewRow("OnInitNewRow")
                .Option("MANUAL_UPDATING", true)
            )
        </div>
     </div>
</div>

<script>
    function chtWarehouseTemp_OnBeforeSend(method, ajaxOptions) {
        if (method == 'load') {
            ajaxOptions.data.SEARCHFROM = Globalize.formatDate(($('#searchFrom').dxDateBox('instance').option('value')),{dateTime:'short'});            
        }
    }
    
    function OnContentReady(e){
        if (e.component.option("updating") && !e.component.hasEditData()) {  // updates finished successfully
            e.component.option("updating", false);
            $("#chtWarehouseTemp").dxChart("instance").refresh();
        }
    }

    function OnInitNewRow(e) {
        e.data.WORKDATE = new Date();
        e.data.WAREHOUSECODE = "W03";
    }
    
    function OnInitialized (e) {
        userCustomGrid(e);
    }

</script>