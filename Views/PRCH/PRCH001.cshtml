@using JSMES.WebUI.Alpha.ViewModels.PRC.PRCH;
@using JSMES.WebUI.Alpha.Models.LogStruct;
@using JSMES.WebUI.Alpha.Models.MasterStruct;
@using JSMES.WebUI.Alpha.App_GlobalResources;
@using JSMES.WebUI.Alpha.ViewModels.PRC.PRCH;
@using JSMES.WebUI.Alpha.Infrastructure.DBA;
@using JSMES.WebUI.Alpha.Infrastructure.Enums;

@{
    ViewBag.Title = "Main";
}

<div class="container-fluid">
    <div class="row mt-2">
        <div class="col-lg-12 col-sm-12">
            <div id="form-container">
                @using (Html.BeginForm())
                {
                    @(Html.DevExtreme().Form<PRCH001_LIST>()
                                                .ID("formInfo")
                                                .ColCount(5)
                                                .OnContentReady("formInfo_OnContentReady")
                                                .ScrollingEnabled(false)
                                                .Items(items =>
                                                {
                                                    items.AddSimple()
                                                        .Editor(e => e.DropDownBox()
                                                            .DataSource(d => d.WebApi().Controller("COMA001WebApi")
                                                                .Key("PROCESSCODE")
                                                                .LoadAction("PROCESS_LIST")
                                                            )
                                                            .DisplayExpr("PROCESSNAME")
                                                            .ValueExpr("PROCESSCODE")
                                                            .ReadOnly(true)
                                                        )
                                                        .Name("PROCESS")
                                                        .Label(T => T.Text(LabelText.PROCESS))
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e.DropDownBox()
                                                            .DataSource(d => d.WebApi().Controller("PRCH001WebApi")
                                                                .Key("EQUIPMENTCODE")
                                                                .LoadAction("EQUIPMENT_LIST")
                                                                .LoadParams(new
                                                                {
                                                                    Culture = new JS("function() { return locale; }"),
                                                                    EQUIPMENTCODE = new JS("globalEquipmentCode")
                                                                })
                                                            )
                                                            .ContentTemplate(new TemplateName("EmbeddedDataGridSingle"))
                                                            .DisplayExpr("EQUIPMENTNAME")
                                                            .ValueExpr("EQUIPMENTCODE")
                                                            //.ReadOnly(true)
                                                            .Placeholder("Select a value...")
                                                            //.Value(new JS("globalEquipmentCode[0]"))
                                                            )
                                                        .Name("EQUIPMENT")
                                                        .Label(T => T.Text(LabelText.EQUIPMENTNAME))
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e.DropDownBox()
                                                            .DataSource(d => d.WebApi().Controller("COMA003WebApi")
                                                                .Key("SYSCODE")
                                                                .LoadAction("SHIFT_LIST")
                                                            )
                                                            .DisplayExpr("SYSCODENAME")
                                                            .ValueExpr("SYSCODE")
                                                            .ReadOnly(true)
                                                        //.OnFocusIn("Shift_onFocusIn")
                                                        )
                                                        .Name("SHIFT")
                                                        .Label(T => T.Text(LabelText.SHIFT))
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e.DropDownBox()
                                                            .DataSource(d => d.WebApi().Controller("COMA003WebApi")
                                                                .Key("SYSCODE")
                                                                .LoadAction("INSPECTIONCLASSIFY_LIST")
                                                            )
                                                            .DisplayExpr("SYSCODENAME")
                                                            .ValueExpr("SYSCODE")
                                                            .ReadOnly(true)

                                                            )
                                                        .Name("INSPECTCLASSIFY")
                                                        .Label(T => T.Text(LabelText.INSEPCTIONCLASSIFY))
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e.TagBox()
                                                            .Placeholder(LabelText.ANSWERPLEASESELECTHR)
                                                            .DataSource(d => d.WebApi().Controller("COMA002WebApi")
                                                                .Key("EMPNAME")
                                                                .LoadAction("EMP_LIST")
                                                            )
                                                            .DisplayExpr("EMPNAME")
                                                            .ValueExpr("EMPNAME")
                                                            //.SearchEnabled(true)
                                                            //.Multiline(true)
                                                            .HideSelectedItems(true)
                                                        //.ShowSelectionControls(true)
                                                        //.ApplyValueMode(EditorApplyValueMode.UseButtons)
                                                        )
                                                        //.Editor(e => e.TextBox().ReadOnly(true))
                                                        .Name("INSPECTOR")
                                                        .Label(T => T.Text(LabelText.INSPECTOR))
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e
                                                            .TextBox().ID("txtOrderNumber")
                                                            .ReadOnly(true)
                                                            .Placeholder(LabelText.ANSWERPLEASESELECTORDER)
                                                            .OnFocusIn("OrderNumber_onFocusIn")
                                                        ).Name("ORDERNUMBER")
                                                        .Label(T => T.Text(LabelText.ORDERNUMBER))
                                                        .Visible(false)
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e
                                                            .TextBox().ID("txtSEQ").ReadOnly(true)
                                                        ).Name("ORDERSEQUENCE")
                                                        .Label(T => T.Text(LabelText.SEQUENCE))
                                                        .Visible(false)
                                                        .ColSpan(1);

                                                    //.Editor(e => e.TextBox().ReadOnly(true))
                                                    //.Name("PARTNUMBER")
                                                    //.Label(T => T.Text(LabelText.PARTNUMBER))
                                                    //.ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e.TextBox().ReadOnly(true))
                                                        .Name("PARTNUMBER")
                                                        .Label(T => T.Text(LabelText.PARTNUMBER))
                                                        .ColSpan(1);

                                                    items.AddSimple()
                                                        .Editor(e => e.DropDownBox()
                                                            .DataSource(d => d.WebApi().Controller("PRCH001WebApi")
                                                                .Key("PARTNUMBER")
                                                                .LoadAction("PARTNUMBER_LIST")
                                                                .OnBeforeSend("Partnumber_OnBeforeSend")
                                                            //.LoadParams(new
                                                            //{
                                                            //    Culture = new JS("function() { return locale; }"),
                                                            //    EQUIPMENTCODE = new JS("globalEquipmentCode")
                                                            //})
                                                            )
                                                            .ContentTemplate(new TemplateName("EmbeddedDataPartGridSingle"))
                                                            .DisplayExpr("PRODUCTNAME")
                                                            .ValueExpr("PARTNUMBER")
                                                            //.ID("PRODUCTNAME")
                                                            //.ReadOnly(true)
                                                            .Placeholder("Select a value...")
                                                            .OnValueChanged("itemPart_valueChanged")
                                                        //.Value(new JS("globalEquipmentCode[0]"))
                                                        )
                                                        .Name("PRODUCTNAME")
                                                        .Label(T => T.Text(LabelText.PRODUCTNAME))
                                                        .ColSpan(2);

                                                    items.AddEmpty()
                                                        .ColSpan(2);
                                                })
                    )
                }
            </div>
            @(Html.DevExtreme().DataGrid<PRCH001B_LIST>()
                                        .ID("grdSampleInspection")
                                         .DataSource(d => d.WebApi()
                                                        .Controller("PRCH001WebApi")
                                                        .Key("INSPECTCODE")
                                                        .LoadAction("getSampleInspection")
                                                        .OnBeforeSend("grdSampleInspection_onBeforeSend")
                                                    )
                                        .Columns(columns =>
                                        {
                                            columns.AddFor(m => m.DISPLAYSEQUENCE).AllowEditing(false).Visible(false);
                                            columns.AddFor(m => m.INSPECTCODE).AllowEditing(false)
                                                .Lookup(l => l.DataSource(d => d.WebApi()
                                                    .Controller("MSTL002WebApi")
                                                    .LoadAction("getInspectItem")
                                                    .Key("INSPECTCODE")
                                                )
                                                .ValueExpr("INSPECTCODE")
                                                .DisplayExpr("INSPECTNAME")
                                                .AllowClearing(true)
                                            );
                                            columns.AddFor(m => m.SPEC).AllowEditing(false);//.CalculateCellValue("function(rowdata){ return rowdata.LSL + ' ~ ' + rowdata.USL;}");
                                        columns.AddFor(m => m.INSPECTUNIT).AllowEditing(false)
                                                .Lookup(lookup => lookup
                                                    .DataSource(d => d.WebApi()
                                                        .Controller("COMA003WebApi").Key("SYSCODE")
                                                        .LoadAction("INSPECTUNIT_LIST")
                                                    )
                                                .DisplayExpr("SYSCODENAME")
                                                .ValueExpr("SYSCODE")
                                            );
                                            columns.AddFor(m => m.DATATYPE).Visible(false);
                                            columns.AddFor(m => m.SPECCLASS).Visible(false);
                                            columns.AddFor(m => m.USL).Visible(false);
                                            columns.AddFor(m => m.LSL).Visible(false);
                                            columns.AddFor(m => m.CSL).Visible(false);
                                            columns.AddFor(m => m.UCL).Visible(false);
                                            columns.AddFor(m => m.LCL).Visible(false);
                                            columns.AddFor(m => m.RESULT).AllowEditing(false);
                                            columns.AddFor(m => m.SAMPLE1).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE2).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE3).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE4).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE5).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE6).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE7).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE8).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE9).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE10).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE11).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE12).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE13).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE14).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE15).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE16).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE17).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE18).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE19).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE20).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE21).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE22).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE23).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE24).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE25).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE26).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE27).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE28).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE29).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.SAMPLE30).EditCellTemplate(new JS("edittest")).ShowEditorAlways(true).AllowSorting(false);
                                            columns.AddFor(m => m.INSPECTVALUE1).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT1).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE2).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT2).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE3).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT3).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE4).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT4).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE5).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT5).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE6).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT6).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE7).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT7).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE8).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT8).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE9).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT9).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE10).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT10).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE11).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT11).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE12).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT12).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE13).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT13).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE14).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT14).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE15).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT15).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE16).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT16).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE17).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT17).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE18).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT18).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE19).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT19).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE20).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT20).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE21).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT21).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE22).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT22).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE23).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT23).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE24).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT24).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE25).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT25).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE26).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT26).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE27).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT27).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE28).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT28).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE29).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT29).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE30).Visible(false);
                                            columns.AddFor(m => m.INSPECTVALUE_TEXT30).Visible(false);
                                        })
                                          .Editing(e =>
                                              e.Mode(GridEditMode.Batch)
                                                  .AllowUpdating(new JS("iudAuth();"))
                                                  .AllowAdding(false)
                                          )
                                        .ColumnMinWidth(50)
                                        .SearchPanel(c => c.Visible(true))
                                        .RemoteOperations(true)
                                        .ColumnAutoWidth(true)
                                        .ShowRowLines(true)
                                        .Paging(p => p.PageSize(25).Enabled(true))
                                        .Pager(p => p.ShowPageSizeSelector(true).ShowNavigationButtons(true).AllowedPageSizes(new int[] { 10, 25, 50, 100, 1000 }))
                                        .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                        .AllowColumnResizing(true)
                                        .RowAlternationEnabled(true)
                                        .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true))
                                        .Selection(s => s.SelectAllMode(SelectAllMode.AllPages).ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.OnClick).Mode(SelectionMode.Single))
                                          .OnInitialized("grdSampleInspection_OnInitialized")
                                          //.OnCellClick("grdSampleInspection_OnCellClick")
                                          .OnToolbarPreparing("grdSampleInspection_OnToolbarPreparing")
                                          .OnEditorPreparing("grdSampleInspection_OnEditorPrepared")
                                          .OnCellPrepared("grdSampleInspection_OnCellPrepared")
            )
        <div id="form-container" style="margin-top: 10px">
                @using (Html.BeginForm())
                {
                    @(Html.DevExtreme().Form<PRCH001_LIST>()
                                                  .ID("formWO3")
                                                  .ColCount(4)
                                                  .ScrollingEnabled(false)
                                                  .Items(items =>
                                                  {
                                                      items.AddEmpty().ColSpan(2);
                                                      items.AddButton().ColSpan(1)
                                                          .HorizontalAlignment(HorizontalAlignment.Left)
                                                          .ButtonOptions(b => b.Text(LabelText.INSERTION)
                                                              .Icon("check")
                                                              .ID("btnSave")
                                                              //.Height("90%")
                                                              .Width("100%")
                                                              .StylingMode(ButtonStylingMode.Contained)
                                                              .Type(ButtonType.Success)
                                                              .OnClick("btnSave_OnClick")
                                                              .Disabled(new JS("!iudAuth();"))
                                                          );

                                                      items.AddButton().ColSpan(1)
                                                          .HorizontalAlignment(HorizontalAlignment.Left)
                                                          .ButtonOptions(b => b.Text(LabelText.REFRESH)
                                                              .Icon("refresh")
                                                              .ID("btnRemove")
                                                              .Width("100%")
                                                              .StylingMode(ButtonStylingMode.Contained)
                                                              .Type(ButtonType.Normal)
                                                              .Disabled(new JS("!iudAuth();"))
                                                          );
                                                  })
                    )
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div id="customTestGrid"></div>
        </div>
    </div>
</div>

@*품번 선택*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedDataPartGridSingle"))
{
    @(Html.DevExtreme().DataGrid<PartNumberMaster>()
                                  .ID("grdPartList")
                                  .DataSource(new JS(@"component.option(""dataSource"")"))
                                  .Columns(columns =>
                                  {
                                      //columns.AddFor(m => m.PLANTCODE).Visible(false);

                                      columns.AddFor(m => m.PARTNUMBER);
                                      columns.AddFor(m => m.PRODUCTNAME);
                                  })
                                  //.StateStoring(s => s.Enabled(true).StorageKey("PRCA001_grdPartList").Type(StateStoringType.LocalStorage))
                                  .ColumnAutoWidth(true)
                                  .HoverStateEnabled(true)
                                  .Paging(p => p.PageSize(10))
                                  .FilterRow(f => f.Visible(false))
                                  .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
                                  .Height(445)
                                  //.Width(800)
                                  .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true).Mode(GridScrollingMode.Standard))
                                  .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                                  .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                  .OnSelectionChanged(@<text>
                                    function(selectedItems) {
                                    var haskey;
                                    var keys = selectedItems.selectedRowKeys;
                                    if(typeof keys !== 'undefined' && keys.length > 0)
                                    {
                                    haskey = true;
                                    }

                                    component.option("value", haskey ? keys[0] : null);
                                    component.option("subvalue", selectedItems.selectedRowsData);
                                    if(typeof keys !== 'undefined' && keys.length > 0){
                                    component.close();
                                    }
                                    }
                                </text>)
    )
}

@*설비 선택*@
@using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridSingle"))
{
    @(Html.DevExtreme().DataGrid<EquipmentMaster>()
                                  .ID("grdList")
                                  .DataSource(new JS(@"component.option(""dataSource"")"))
                                  .Columns(columns =>
                                  {
                      //columns.AddFor(m => m.PLANTCODE).Visible(false);

                      columns.AddFor(m => m.EQUIPMENTCODE).Visible(false);
                                      columns.AddFor(m => m.EQUIPMENTNAME);
                                  })
                                  //.StateStoring(s => s.Enabled(true).StorageKey("PRCA001_grdPartList").Type(StateStoringType.LocalStorage))
                                  .ColumnAutoWidth(true)
                                  .HoverStateEnabled(true)
                                  .Paging(p => p.PageSize(10))
                                  .FilterRow(f => f.Visible(false))
                                  .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
                                  .Height(445)
                                  //.Width(800)
                                  .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true).Mode(GridScrollingMode.Standard))
                                  .Selection(s => s.Mode(SelectionMode.Single).AllowSelectAll(false))
                                  .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                  .OnSelectionChanged(@<text>
                                    function(selectedItems) {
                                    var haskey;
                                    var keys = selectedItems.selectedRowKeys;
                                    if(typeof keys !== 'undefined' && keys.length > 0)
                                    {
                                    haskey = true;
                                    }

                                    component.option("value", haskey ? keys[0] : null);
                                    component.option("subvalue", selectedItems.selectedRowsData);
                                    if(typeof keys !== 'undefined' && keys.length > 0){
                                    component.close();
                                    }
                                    }
                                </text>)
    )
}

@*작업지시 선택 팝업창*@
@(Html.DevExtreme().Popup()
                    .ID("OrderNumber_POPUP")
                    .ElementAttr("class", "popup")
                    .Title(new JS("'" + LabelText.INSPECT + ' ' + LabelText.LIST + "'")) //+ " (' + Globalize.dateFormatter({ date: \"short\" })(new Date()) + ')'"))
                    .DragEnabled(true)
                    .ContentTemplate(new TemplateName("EmbeddedPRCD001_OrderNumber"))
                      .ToolbarItems(t =>
                      {
                          t.Add().Widget(w => w.Button().Text(LabelText.CONFIRM)
                              .Width(200)
                              .OnClick("popFrmOrderNumber_btnSave_onClick")
                              .Icon("check")
                              .Disabled(new JS("!iudAuth();"))
                              .Type(ButtonType.Success).StylingMode(ButtonStylingMode.Contained))
                              .Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom);
                          t.Add().Widget(w => w.Button().Text(LabelText.CANCEL)
                              .OnClick("popFrmOrderNumber_btnCancel_onClick")
                              .Icon("refresh")
                              .Type(ButtonType.Normal)
                              .Disabled(new JS("!iudAuth();"))
                              .Width(200).StylingMode(ButtonStylingMode.Contained))
                              .Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom);
                      })
                    .FullScreen(false)
                    .CloseOnOutsideClick(true)
                    .ShowCloseButton(true)
                    .Width("90%")
)

@using (Html.DevExtreme().NamedTemplate("EmbeddedPRCD001_OrderNumberGrid"))
{
    @(Html.DevExtreme().DataGrid<PRCH001A_LIST>()
                                    .ID("grdOrderNumber")
                                    .DataSource(d => d.WebApi().Controller("PRCH001WebApi").Key("WOSEQUENCE").LoadAction("getWorkOrder").OnBeforeSend("grdOrderNumber_onBeforeSend"))
                                    .SearchPanel(s => s.Visible(true))
                                    .ColumnAutoWidth(true)
                                    .Scrolling(s => s.ScrollByContent(true).ScrollByThumb(true))
                                    .Columns(columns =>
                                    {
                                        columns.AddFor(m => m.WOSEQUENCE).Visible(false);
                                        columns.AddFor(m => m.HIGHPRIORITYFLAG).Visible(false);
                                        columns.AddFor(m => m.ORDERDATE).SelectedFilterOperation(FilterOperations.Equal).FilterValue(new JS("new Date()")).Visible(false);
                                        columns.AddFor(m => m.ORDERNUMBER);
                                        columns.AddFor(m => m.ORDERSEQUENCE);
                                        columns.AddFor(m => m.PARTNUMBER);
                                        columns.AddFor(m => m.PRODUCTNAME);
                                        columns.AddFor(m => m.PROCESSCODE)
                                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                                .Controller("COMA001WebApi").Key("PROCESSCODE")
                                                .LoadAction("PROCESS_LIST"))
                                                .DisplayExpr("PROCESSNAME")
                                                .ValueExpr("PROCESSCODE")
                                            ).Visible(false);
                                        columns.AddFor(m => m.EQUIPMENTCODE).Visible(false)
                                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                                .Controller("COMA001WebApi").Key("EQUIPMENTCODE")
                                                .LoadAction("EQUIPMENT_LIST"))
                                                .DisplayExpr("EQUIPMENTNAME")
                                                .ValueExpr("EQUIPMENTCODE")
                                            );
                                        columns.AddFor(m => m.ORDERQUANTITY).Visible(false);
                                        columns.AddFor(m => m.STATE).Visible(false)
                                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                            .Controller("COMA003WebApi").Key("SYSCODE")
                                            .LoadAction("STATE_LIST"))
                                            .DisplayExpr("SYSCODENAME")
                                            .ValueExpr("SYSCODE")
                                        );
                                        columns.AddFor(m => m.SHIFTCODE).Visible(false)
                                            .Lookup(lookup => lookup.DataSource(d => d.WebApi()
                                                .Controller("COMA003WebApi").Key("SYSCODE")
                                                .LoadAction("SHIFT_LIST"))
                                                .DisplayExpr("SYSCODENAME")
                                                .ValueExpr("SYSCODE")
                                            );
                                        columns.AddFor(m => m.WORKER).Visible(false);
                                    })
                                    .HeaderFilter(h => h.Visible(false))
                                    .ColumnHidingEnabled(true)
                                    .ColumnResizingMode(ColumnResizingMode.Widget)
                                    .AllowColumnResizing(true)
                                    .RowAlternationEnabled(true)
                                    .ShowBorders(false)
                                    .ShowColumnLines(false)
                                    .ShowRowLines(false)
                                    .ColumnAutoWidth(true)
                                    .AllowColumnReordering(true)
                                    .Scrolling(s => s.Mode(GridScrollingMode.Standard))
                                    .Scrolling(s => s.ScrollByThumb(true).ScrollByContent(true))
                                    .Paging(paging => paging.PageSize(50))
                                    .Pager(pager =>
                                    {
                                        pager.ShowPageSizeSelector(true);
                                        pager.AllowedPageSizes(new List<int> { 10, 25, 50, 100, 1000 });
                                    })
                                    .Selection(s => s.Mode(SelectionMode.Single).ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always))
                                    .StateStoring(s => s.Enabled(true).StorageKey("PRCD001_grdOrderNumber").Type(StateStoringType.LocalStorage))
                                    .Option("USE_RESIZE", false))
}

@using (Html.DevExtreme().NamedTemplate("EmbeddedPRCD001_OrderNumber"))
{
    @(Html.DevExtreme().ScrollView()
                                .ScrollByContent(true)
                                .ScrollByThumb(true)
                                .Content(
                                @<text>
                                    @(Html.DevExtreme().Form<PRCH001A_LIST>()
                                                                .ID("popFrmOrderNumber")
                                                                .LabelLocation(FormLabelLocation.Left)
                                                                .ColCount(2)
                                                                .Items(items =>
                                                                {
                                                                                items.AddSimple().Template(
                                                    new TemplateName("EmbeddedPRCD001_OrderNumberGrid")
                                                ).ColSpan(2);

                                                                //items.AddButton()
                                                                //        .HorizontalAlignment(HorizontalAlignment.Left)
                                                                //        .ButtonOptions(b => b.Text(LabelText.CONFIRM)
                                                                //            .OnClick("popFrmOrderNumber_btnSave_onClick")
                                                                //            .Type(ButtonType.Success)
                                                                //            .Width("100%")
                                                                //    ).ColSpan(1);

                                                                //items.AddButton()
                                                                //        .HorizontalAlignment(HorizontalAlignment.Left)
                                                                //        .ButtonOptions(b => b.Text(LabelText.CANCEL)
                                                                //            .OnClick("popFrmOrderNumber_btnSave_onClick")
                                                                //            .Type(ButtonType.Normal)
                                                                //            .Width("100%")
                                                                //    ).ColSpan(1);
                                                            })
                                    )
                                </text>
                                                            ))
}

@Html.Partial("_DropdownPartial")

<script>
    var sampleCount;

    var displaySeq;

    var inspectclassify;
    var inspectclassifycnt;


    var priorities = [{
        "CODE": "OK",
        "NAME": "양품"
        }, {
            "CODE": "NG",
            "NAME": "불량"
        }];



    function itemPart_valueChanged(e) {

        var partnum = $('#formInfo').dxForm('instance').getEditor('PRODUCTNAME').option('value');
        $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value', partnum);

        //if ($("#grdRouteProcessList").dxDataGrid("instance") != undefined) {
        //    $("#grdRouteProcessList").dxDataGrid("instance").refresh();
        //    if ($("#grdProcessequip").dxDataGrid("instance") != undefined) {

        //        $("#grdProcessequip").dxDataGrid("instance").refresh();
        //        $('#grdProcessequip').dxDataGrid('instance').cancelEditData();
        //    }
        //}
    }

    function Partnumber_OnBeforeSend(method, ajaxOptions) {
        if (method == 'load') {

            var eqp = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');

            ajaxOptions.data.processCode = globalProcessCode;
           // ajaxOptions.data.equipmentCode = eqp;

            //var data = $('#grdWorkorder').dxDataGrid('instance').getSelectedRowsData();
            //if (data.length > 0) {
            //    ajaxOptions.data.orderNumber = data[0].ORDERNUMBER;
            //    ajaxOptions.data.orderSequence = data[0].ORDERSEQUENCE;
            //    ajaxOptions.data.processCode = globalProcessCode;
            //    ajaxOptions.data.equipmentCode = eqp;
            //}
            //else {
            //    ajaxOptions.data.orderNumber = "";
            //    ajaxOptions.data.orderSequence = 1;
            //    ajaxOptions.data.processCode = "";
            //}
        }
    }

    function grdSampleInspection_OnCellPrepared(e)
    {
        if (e.rowType == 'data' && e.column.dataField === "RESULT") {
            e.cellElement.css("color", e.data.RESULT == "OK" ? "" : "red");
            e.cellElement.css("font-size", 22);
            e.cellElement.css("text-align", "center");

        }
    }

    function btnSave_OnClick(e) {

        var proc = globalProcessCode;
        var eqp = globalEquipmentCode[0];
        var ordernum = $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value');

        if (proc == undefined || proc == null) {
            DevExpress.ui.dialog.alert('@LabelText.QUASTIONPLEASECHOOSEPROCESS', "warning");
            return;
        } else if(eqp == undefined || eqp == null) {
            DevExpress.ui.dialog.alert("설비를 선택해 주세요.", "warning");
            return;
        } else if (ordernum == undefined || ordernum == null) {
            DevExpress.ui.dialog.alert('@LabelText.ANSWERNOSELECTORDER', "warning");
            return;
        }

        var savefield = "SAMPLE" + displaySeq.toString();
        var grid = $('#grdSampleInspection').dxDataGrid('instance');
        var cnt = grid.totalCount();
        var inputchk = true;
        var okng = true;

        if (cnt <= 0) {
            DevExpress.ui.dialog.alert('조회된 검사 항목이 없습니다.', "warning");
            return;
        }

        for (var Index = 0; Index < cnt; Index++) {
            var input = grid.cellValue(Index, savefield);
            var inputResult = grid.cellValue(Index, 'RESULT');
            if (input == undefined || input == null) {
                inputchk = false;
                break;
            } else if (inputResult == "NG" || inputResult == null || inputResult == undefined) {
                okng = false;
            }
        }

        if (!inputchk) {
            DevExpress.ui.dialog.alert(savefield + " 검사값을 모두 입력하여야 합니다.", "warning");
            return;
        }

        var orderseq = $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value');
        var inspify = $('#formInfo').dxForm('instance').getEditor('INSPECTCLASSIFY').option('value');
        var inspworker = $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value');
        var partnum = $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value');
        var inspector = $('#formInfo').dxForm('instance').getEditor('INSPECTOR').option('value');
        var maxsample = sampleCount * inspectclassifycnt;

        var result = DevExpress.ui.dialog.confirm('@LabelText.QUESTIONINSERT', "Confirm changes");
        result.done(function(dialogResult) {
            if (!dialogResult) {
                return;
            } else {

                var aJsonArray = new Array();
                var aJson = new Object();

                for (var Index = 0; Index < cnt; Index++) {

                    aJson = new Object();

                    aJson.INSPECTCODE = grid.cellValue(Index, "INSPECTCODE");
                    //aJson.INSPECTDATE
                    aJson.USL = grid.cellValue(Index, "USL");
                    aJson.LSL = grid.cellValue(Index, "LSL");
                    aJson.MEMO = grid.cellValue(Index, "DATATYPE");
                    aJson.SPECCLASS = grid.cellValue(Index, "SPECCLASS");
                    aJson.UCL = grid.cellValue(Index, "UCL");
                    aJson.LCL = grid.cellValue(Index, "LCL");
                    aJson.CSL = grid.cellValue(Index, "CSL");
                    aJson.INSPECTVALUE_TEXT = grid.cellValue(Index, savefield);
                    aJson.INSPECTRESULT = grid.cellValue(Index, "RESULT");


                    aJsonArray.push(aJson);
                }

                var data = new Object();
                data.data = JSON.stringify(aJsonArray);
                data.INSPECTNO = displayseq;
                data.PLANTCODE = "";
                data.ORDERNUMBER = ordernum;
                data.ORDERSEQUENCE = orderseq;
                data.PARTNUMBER = partnum;
                data.PROCESSCODE = proc;
                data.EQUIPMENTCODE = eqp;
                data.INSPECTCLASSIFY = inspify;
                data.INSPECTOR = inspector;
                data.TOTALSAMPLECOUNT = maxsample;
                data.CURRENTSAMPLECOUNT = displaySeq;
                if (okng)
                    data.INSPECTRESULT = "OK";
                else
                    data.INSPECTRESULT = "NG";

                $.ajax({
                    url: '@Url.Action("postSample", "PRCH001WebApi", new {httproute = "DefaultApi"})',
                    type: 'POST',
                    data: data,
                    success: function() {
                        @*setRefresh();
                        $("#grdWorkorder").dxDataGrid('instance').refresh();
                        $("#grdWorkorder").dxDataGrid('instance').clearSelection();
                        DevExpress.ui.notify('@LabelText.ANSWERTRANPROCESS', 'success', globalNotificationSuccessTime);*@
                    },
                    error: function(e) {
                        console.log(data);
                        showError(this, e);
                        //console.log("error");
                    }
                });
            }
        });
    }

    function grdSampleInspection_OnEditorPrepared(e) {
        if (e.parentType == 'dataRow') {
            var field = e.dataField.substring(0,5);
            var value = e.value;

            var onValueChanged = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = function (args) {
                onValueChanged.apply(this, arguments);

                if (field == "SAMPLE") {

                }
                //if (field == 'SELECTYN') {
                //    setRowQty();
                //} else if (field == 'ORDERQUANTITY') {

                //    var grid = $("#grdProcessequip").dxDataGrid("instance");
                //    var cnt = grid.totalCount();
                //    var result = 0;

                //    if (cnt > 0) {
                //        for (Index = 0; Index < cnt; Index++) {
                //            var YN = $('#grdProcessequip').dxDataGrid('instance').cellValue(Index, 'SELECTYN');
                //            if (YN == true) {
                //                result = result +
                //                    $('#grdProcessequip').dxDataGrid('instance').cellValue(Index, 'ORDERQUANTITY');
                //            }
                //        }
                //        $('#QTY').dxNumberBox('instance').option('onValueChanged', undefined);
                //        $('#form').dxForm('instance').option('formData.ORDERQUANTITY', result);
                //        $('#QTY').dxNumberBox('instance').option('onValueChanged', function (event) { setRowQty(); });
                //    }
                //}
            }

        }
    }
    function grdSampleInspection_OnToolbarPreparing(e) {
        var toolbarItems = e.toolbarOptions.items;
        $.each(toolbarItems, function (_, item) {
            if (item.name === "saveButton" || item.name == "revetButton" || item.name == "addRowButton") {
                // Change the item options here
                item.visible = false;
            }
        });
    }

    @*
    $(document).ready(function () {
        var queryResult = getnavigationDataSource();

        queryResult.store.load().done(function(e) {
            var table = "<table> ";

            var thead = " <thead> " +
                        "    <tr> " +
                        "    <th width=50>CSL</th>" +
                        "    <th width=50>DISPLAYSEQUENCE</th>" +
                        "    <th width=50>INSPECTCODE</th>" +
                        "    <th width=50>INSPECTUNIT</th>" +
                        "    <th width=50>LCL</th>" +
                        "    <th width=50>LSL</th>" +
                        "    <th width=50>RESULT</th>" +
                        "    <th width=50>SPEC</th>" +
                        "    <th width=50>UCL</th>" +
                        "    <th width=50>USL</th>" +
                        "    <th width=50>Control</th>" +
                        "    </tr> " +
                        "  </thead> ";
            table = table + thead;

            var body =  "  <tbody> ";
            table = table + body;

            for (itemIndex = 0; itemIndex < e.length; itemIndex++) {
                var row =
                        "    <tr> " +
                        "    <td>" + e[itemIndex].CSL + "</td>" +
                        "    <td>" + e[itemIndex].DISPLAYSEQUENCE + "</td>" +
                        "    <td>" + e[itemIndex].INSPECTCODE + "</td>" +
                        "    <td>" + e[itemIndex].INSPECTUNIT + "</td>" +
                        "    <td>" + e[itemIndex].LCL + "</td>" +
                        "    <td>" + e[itemIndex].LSL + "</td>" +
                        "    <td>" + e[itemIndex].RESULT + "</td>" +
                        "    <td>" + e[itemIndex].SPEC + "</td>" +
                        "    <td>" + e[itemIndex].UCL + "</td>" +
                        "    <td>" + e[itemIndex].USL + "</td>" +
                        "    <td><div class='textbox1'></td>" +
                        "    </tr> ";



                table = table + row;
            }

            table = table + "  </tbody> " +
                            "</table>";

            $("#customTestGrid").append(table);



            $(".textbox1").dxTextBox({
                value: "John Smith",
                disabled: true
            });


            $(".number1").dxNumberBox({
                value: 15,
                min: 10,
                max: 20,
                showSpinButtons: true
            });

        });
    });

    function getnavigationDataSource() {
        //ordernumber=WO190811002&orderSequence=1&partnumber=TFBFMH300026&processCode=1001&equipmentCode=&_=1567499918549

        return {
            store: DevExpress.data.AspNet.createStore({
                key: ["EMP_CODE"],
                loadUrl: '@Url.Action("getSampleInspection", "PRCH001WebApi", new { httproute = "DefaultApi" })',
                loadParams: { ordernumber: "WO190811002", orderSequence : "1", partnumber: "TFBFMH300026", processCode :"1001", equipmentCode : "" }
            })
        };
    }
    *@

    function grdSampleInspection_OnInitialized(e) {

        initDateColumnHeader();
    }
    function AA() {
        console.log("AA");

    }
    var tmp;
    function edittest(cellElement, cellInfo) {

        var insp = 3 + displaySeq;

            if (cellInfo.row.data.DATATYPE == "B") {
                $("<div />").dxRadioGroup({
                    items: priorities,
                    valueExpr:"CODE",
                    displayExpr:"NAME",
                    layout: "horizontal",
                    disabled: !(cellInfo.columnIndex == 3 + displaySeq),
                    value: cellInfo.value,
                    onValueChanged: function(e) {
                        cellInfo.setValue(e.value);
                        if (cellInfo.value == "OK")
                            cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'OK');
                        else
                            cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'NG');

                    }
                }).appendTo(cellElement);
            } if (cellInfo.row.data.DATATYPE == "N") {
                $("<div />").dxNumberBox({
                    format: "#,##0.00",
                    value: cellInfo.value,
                    disabled: !(cellInfo.columnIndex == 3 + displaySeq),
                    onValueChanged: function(e) {
                        cellInfo.setValue(e.value);
                        var lsl = cellInfo.data.LSL;
                        var usl = cellInfo.data.USL;
                        var specclass = cellInfo.data.SPECCLASS;
                        var result = false;;

                        if (specclass == "B") {
                            if (lsl <= cellInfo.value && cellInfo.value <= usl)
                                result = true;
                        } else if (specclass == "L") {
                            if (lsl <= cellInfo.value)
                                result = true;
                        } else if (specclass == "U") {
                            if (cellInfo.value <= usl)
                                result = true;
                        }
                        if (result)
                            cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'OK');
                        else
                            cellInfo.component.cellValue(cellInfo.rowIndex, 'RESULT', 'NG');
                    }
                }).appendTo(cellElement);
            } if (cellInfo.row.data.DATATYPE == "S") {
                $("<div />").dxTextBox({
                    value: cellInfo.value,
                    disabled: !(cellInfo.columnIndex == 3 + displaySeq),
                    onValueChanged: function(e) {
                        cellInfo.setValue(e.value);
                    }
                }).appendTo(cellElement);
        }
    }
    $(function () {
        checkGlobalProcess();
    });

    function initDateColumnHeader() {
        var grid = $('#grdSampleInspection').dxDataGrid('instance');
        var columns = grid.option("columns");

        //.EditCellTemplate(new JS("xx")).ShowEditorAlways(true);

        for (var i = 30; i >= sampleCount * inspectclassifycnt; i--) {
            var field = "SAMPLE" + (i + 1);
            grid.columnOption(field, 'visible', false);
        }

        //for (var i = 0; i < sampleCount*3; i++) {

        //    var caption = (i + 1).toString() + '차';
        //    var sample = {
        //        dataField: "Sample" + (i + 1), // "Sample" + (i + 1),
        //        caption: caption,
        //        showEditorAlways :true,
        //        editCellTemplate: function(cellElement, cellInfo) {
        //           if (cellInfo.row.data.DATATYPE == "B") {
        //                $("<div />").dxRadioGroup({
        //                    items: priorities,
        //                    valueExpr:"CODE",
        //                    displayExpr:"NAME",
        //                    layout: "horizontal",
        //                    value: cellInfo.value,
        //                    onValueChanged: function(e) {
        //                            cellInfo.setValue(e.value);
        //                        }
        //                }).appendTo(cellElement);
        //            } if (cellInfo.row.data.DATATYPE == "N") {
        //                $("<div />").dxNumberBox({
        //                    format: "#,##0.00",
        //                    value: cellInfo.value,
        //                    onValueChanged: function(e) {
        //                            cellInfo.setValue(e.value);
        //                        }
        //                }).appendTo(cellElement);
        //            } if (cellInfo.row.data.DATATYPE == "S") {
        //                $("<div />").dxTextBox({
        //                    value: cellInfo.value,
        //                    onValueChanged: function(e) {
        //                        cellInfo.setValue(e.value);
        //                    }
        //                }).appendTo(cellElement);
        //            }
        //        }
        //    }
        //    console.log(grid);
        //    columns.push(sample);
        //}

        grid.option("columns", columns);
        console.log(grid);
    }

    //function grdSampleInspection_OnCellClick(e) {
    //    if (e.rowType == "data") {
    //        if (e.column.dataField == "Sample1") {
    //            if (e.value != undefined || e.value != null) {
    //                $('#grdSampleInspection').dxDataGrid('instance').closeEditCell();
    //            }

    //        }
    //        //&& e.column.dataField == "WORKER"
    //    }

    //}

    function formInfo_OnContentReady(e) {
        e.component.getEditor('PROCESS').option('value', globalProcessCode);
        if (globalEquipmentCode.length > 0)
            e.component.getEditor('EQUIPMENT').option('value', globalEquipmentCode[0]);

        //  ATTRIBUTE4 = 초중종 샘플수

        $.ajax({
            url: '@Url.Action("getSampleCount", "PRCH001WebApi", new { httproute = "DefaultApi", })',
            type: 'GET',
            async: false,
            success: function (data) {
                console.log("OK");
                console.log(data);
                sampleCount = data.data[0].ATTRIBUTE4;
            },
            error: function (e) {
                showError(this, e);
            }
        });

        // 초/중/종 구분 cnt

        $.ajax({
            url: '@Url.Action("getInspClassify", "PRCH001WebApi", new { httproute = "DefaultApi", })',
            type: 'GET',
            async: false,
            success: function (data) {
                console.log("OK");
                console.log(data);
                inspectclassify = data.data;
                inspectclassifycnt = data.data[0] == undefined ? 1 : data.data[0].CNT == null ? 1 : undefined ? 1 : data.data[0].CNT;
            },
            error: function (e) {
                showError(this, e);
            }
        });


        console.log(sampleCount);
    }

    function grdOrderNumber_onBeforeSend(method, ajaxOptions) {
        if (method == "load") {

            ajaxOptions.data.processCode = globalProcessCode;
            ajaxOptions.data.equipmentCode = globalEquipmentCode;

        }
        else {
            ajaxOptions.data.processCode = "";
            ajaxOptions.data.equipmentCode = "";
        }
    }

    function grdSampleInspection_onBeforeSend(method, ajaxOptions) {
        if (method == "load") {
            if ($('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value') != null
                && $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value') != null
                && $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value') != null
                    )
            {
                ajaxOptions.data.ordernumber = $('#formInfo').dxForm('instance').getEditor('ORDERNUMBER').option('value');
                ajaxOptions.data.orderSequence = $('#formInfo').dxForm('instance').getEditor('ORDERSEQUENCE').option('value');
                ajaxOptions.data.partnumber = $('#formInfo').dxForm('instance').getEditor('PARTNUMBER').option('value');
                ajaxOptions.data.processCode = globalProcessCode;
                ajaxOptions.data.equipmentCode = $('#formInfo').dxForm('instance').getEditor('EQUIPMENT').option('value');
            }
            else {
                ajaxOptions.data.ordernumber = "";
                ajaxOptions.data.orderSequence = 0;
                ajaxOptions.data.partnumber = "";
                ajaxOptions.data.processCode = "";
                ajaxOptions.data.equipmentCode = "";
            }
        }
        else {
            ajaxOptions.data.ordernumber = "";
            ajaxOptions.data.orderSequence = 0;
            ajaxOptions.data.partnumber = "";
            ajaxOptions.data.processCode = "";
            ajaxOptions.data.equipmentCode = "";
        }
    }

    function Shift_onFocusIn(e) {

        var shift = $('#formInfo').dxForm('instance').getEditor('SHIFT').option('value');

        if (shift == '@SHIFTCODE.A')
            $('#formInfo').dxForm('instance').updateData('SHIFT', '@SHIFTCODE.B');
        else
            $('#formInfo').dxForm('instance').updateData('SHIFT', '@SHIFTCODE.A');
    }

    function OrderNumber_onFocusIn(e) {
        $("#OrderNumber_POPUP").dxPopup("instance").show();
        $('#grdOrderNumber').dxDataGrid('instance').refresh();
        $('#grdOrderNumber').dxDataGrid('instance').clearSelection();
    }

    function popFrmOrderNumber_btnCancel_onClick(e)
    {
        $("#OrderNumber_POPUP").dxPopup("instance").hide();
    }

    function popFrmOrderNumber_btnSave_onClick(e) {

        if ($('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData().length <= 0) {
            $("#OrderNumber_POPUP").dxPopup("instance").hide();
            //$('#txtScanData').dxTextBox('instance').reset();
            //$('#txtScanData').dxTextBox('instance').focus();
            return;
        }

        var itemsOrderNumberValue = null;

        if ($('#formInfo').dxForm('instance').getEditor("ORDERNUMBER").option('value') != null) {
            itemsOrderNumberValue = $('#formInfo').dxForm('instance').getEditor("ORDERNUMBER").option('value') + $('#formInfo').dxForm('instance').getEditor("ORDERSEQUENCE").option('value');
        }
        else {
            itemsOrderNumberValue = "";
        }

        var selectedOrderNumber = $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERNUMBER + $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERSEQUENCE;

        if (itemsOrderNumberValue != selectedOrderNumber) {

            $('#formInfo').dxForm('instance').updateData('ORDERNUMBER', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERNUMBER);
            $('#formInfo').dxForm('instance').updateData('ORDERSEQUENCE', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERSEQUENCE);
            $('#formInfo').dxForm('instance').updateData('PARTNUMBER', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].PARTNUMBER);
            $('#formInfo').dxForm('instance').updateData('PRODUCTNAME', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].PRODUCTNAME);
            $('#formInfo').dxForm('instance').updateData('SHIFT', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].SHIFTCODE);
            //$('#formInfo').dxForm('instance').updateData('INSPECTCLASSIFY', "N1");//checkClassfiy(displaySeq));
            //$('#formInfo').dxForm('instance').updateData('INSPECTTYPE', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].INSEPCTTYPE);
            //$('#formInfo').dxForm('instance').updateData('INSPECTOR', $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].WORKER);
        }

        setDisplaySeq($('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERNUMBER,
            $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERSEQUENCE);

        @*var param = $.param({
            ordernumber: $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERNUMBER,
            ordersequence: $('#grdOrderNumber').dxDataGrid('instance').getSelectedRowsData()[0].ORDERSEQUENCE

        });
        $.ajax({
            url: '@Url.Action("getSampleResult", "PRCH001WebApi", new { httproute = "DefaultApi", })',
            async: false,
            data: param,
            type: 'GET',
            success: function (data) {
                console.log("OK");
                console.log(data);
                sampleCount = data.data[0].ATTRIBUTE4;
            },
            error: function (e) {
                showError(this, e);
            }
        });*@


        $("#OrderNumber_POPUP").dxPopup("instance").hide();

        var grid = $('#grdSampleInspection').dxDataGrid('instance');
        grid.refresh();
    }

    function setDisplaySeq(ordernum, orderseq) {

        var param = $.param({
            ordernumber: ordernum,
            ordersequence: orderseq
        });

        $.ajax({
            url: '@Url.Action("getSampleStatus", "PRCH001WebApi", new { httproute = "DefaultApi", })',
            async: false,
            data: param,
            type: 'GET',
            success: function (data) {
                console.log("OK");
                console.log(data);
                displaySeq = data.data[0] == undefined ? 0 : data.data[0].CURRENTSAMPLECOUNT == null ? 0 : undefined ? 0 : data.data[0].CURRENTSAMPLECOUNT;
                displaySeq++;

                $('#formInfo').dxForm('instance').updateData('INSPECTCLASSIFY', checkClassfiy(displaySeq));

                //inspectclassifycnt = data.data[0] == undefined ? 1 : data.data[0].CNT == null ? 1 : undefined ? 1 : data.data[0].CNT;
            },
            error: function (e) {
                showError(this, e);
            }
        });

    }

    function checkClassfiy(rotationseq) {

        if (rotationseq <= sampleCount) {
            return inspectclassify[0].SYSCODE;
        } else if (sampleCount < sampleCount <= sampleCount * 2) {
            return inspectclassify[1].SYSCODE;
        } else {
            if (inspectclassify.length > 2)
                return inspectclassify[2].SYSCODE;
            else
                return inspectclassify[1].SYSCODE;
        }
    }

</script>
